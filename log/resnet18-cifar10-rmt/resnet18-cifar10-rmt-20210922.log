

---------------------------------------
Torch cuda is available
args.subcommand=run, run the command line
date: 20210922
Experiment result save dir: /home/maggie/mmat/result/defense/rmt/fgsm/basemixup-uniformsampler/resnet18-cifar10/20210922/00000
initilize the dataset loading parameters
load cifar10 dataset
Loading *cifar10* train dataloader finished !
Loading *cifar10* test dataloader finished !
initlize classifier
learned calssify model != None
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 10
batch_size: 1024
epoch_correct_num: tensor(7800)
Accuary of before rmt trained classifier on clean testset:78.0000%
Loss of before mmat trained classifier clean testset:0.7900546789169312
cle_w_train.shape: torch.Size([16791, 8, 512])
cle_y_train.shape: torch.Size([16791, 8])
cle_x_test.shape: torch.Size([10000, 3, 32, 32])
cle_y_test.shape: torch.Size([10000])
adv_x_test.shape: torch.Size([10000, 3, 32, 32])
adv_y_test.shape: torch.Size([10000])
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 10
batch_size: 1024
epoch_correct_num: tensor(382)
Accuary of before rmt trained classifier on adversarial testset:3.8200%
Loss of before mmat trained classifier on adversarial testset:8.518182754516602


0epoch learning rate:0.001


Setting up PyTorch plugin "bias_act_plugin"... /home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/torch/utils/cpp_extension.py:286: UserWarning: 

                               !! WARNING !!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Your compiler (c++) is not compatible with the compiler Pytorch was
built with for this platform, which is g++ on linux. Please
use g++ to to compile your extension. Alternatively, you may
compile PyTorch from source using c++, and then you can also use
c++ to compile your extension.

See https://github.com/pytorch/pytorch/blob/master/CONTRIBUTING.md for help
with compiling PyTorch from source.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

                              !! WARNING !!

  platform=sys.platform))
Done.
Setting up PyTorch plugin "upfirdn2d_plugin"... /home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/torch/utils/cpp_extension.py:286: UserWarning: 

                               !! WARNING !!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Your compiler (c++) is not compatible with the compiler Pytorch was
built with for this platform, which is g++ on linux. Please
use g++ to to compile your extension. Alternatively, you may
compile PyTorch from source using c++, and then you can also use
c++ to compile your extension.

See https://github.com/pytorch/pytorch/blob/master/CONTRIBUTING.md for help
with compiling PyTorch from source.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

                              !! WARNING !!

  platform=sys.platform))
Done.
inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 1/20] [Batch 1/17] [Batch classify loss: 3.264870]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 1/20] [Batch 2/17] [Batch classify loss: 3.195537]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 1/20] [Batch 3/17] [Batch classify loss: 3.149132]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 1/20] [Batch 4/17] [Batch classify loss: 2.748605]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 1/20] [Batch 5/17] [Batch classify loss: 2.713815]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 1/20] [Batch 6/17] [Batch classify loss: 2.452497]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 1/20] [Batch 7/17] [Batch classify loss: 2.572129]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 1/20] [Batch 8/17] [Batch classify loss: 2.416348]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 1/20] [Batch 9/17] [Batch classify loss: 2.307928]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 1/20] [Batch 10/17] [Batch classify loss: 2.203124]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 1/20] [Batch 11/17] [Batch classify loss: 2.173232]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 1/20] [Batch 12/17] [Batch classify loss: 2.026348]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 1/20] [Batch 13/17] [Batch classify loss: 2.024181]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 1/20] [Batch 14/17] [Batch classify loss: 1.814499]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 1/20] [Batch 15/17] [Batch classify loss: 1.924904]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 1/20] [Batch 16/17] [Batch classify loss: 1.945439]


inputs.shape: torch.Size([407, 3, 32, 32])
targets.shape: torch.Size([407, 10])
[Epoch 1/20] [Batch 17/17] [Batch classify loss: 1.681800]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 10
batch_size: 1024
epoch_correct_num: tensor(7021)
0001 epoch rmt trained classifier accuary on the clean testing examples:70.2100%
0001 epoch rmt trained classifier loss on the clean testing examples:1.0220
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 10
batch_size: 1024
epoch_correct_num: tensor(388)
0001 epoch rmt trained classifier accuary on adversarial testset:3.8800%
0001 epoch rmt trained classifier loss on adversarial testset:4.912595272064209


1epoch learning rate:0.001


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 2/20] [Batch 1/17] [Batch classify loss: 1.665608]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 2/20] [Batch 2/17] [Batch classify loss: 1.782790]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 2/20] [Batch 3/17] [Batch classify loss: 1.673936]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 2/20] [Batch 4/17] [Batch classify loss: 1.641280]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 2/20] [Batch 5/17] [Batch classify loss: 1.636909]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 2/20] [Batch 6/17] [Batch classify loss: 1.614612]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 2/20] [Batch 7/17] [Batch classify loss: 1.596530]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 2/20] [Batch 8/17] [Batch classify loss: 1.588867]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 2/20] [Batch 9/17] [Batch classify loss: 1.622960]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 2/20] [Batch 10/17] [Batch classify loss: 1.615137]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 2/20] [Batch 11/17] [Batch classify loss: 1.630463]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 2/20] [Batch 12/17] [Batch classify loss: 1.582151]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 2/20] [Batch 13/17] [Batch classify loss: 1.613112]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 2/20] [Batch 14/17] [Batch classify loss: 1.604490]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 2/20] [Batch 15/17] [Batch classify loss: 1.605881]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 2/20] [Batch 16/17] [Batch classify loss: 1.618526]


inputs.shape: torch.Size([407, 3, 32, 32])
targets.shape: torch.Size([407, 10])
[Epoch 2/20] [Batch 17/17] [Batch classify loss: 1.550755]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 10
batch_size: 1024
epoch_correct_num: tensor(7122)
0002 epoch rmt trained classifier accuary on the clean testing examples:71.2200%
0002 epoch rmt trained classifier loss on the clean testing examples:1.0246
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 10
batch_size: 1024
epoch_correct_num: tensor(399)
0002 epoch rmt trained classifier accuary on adversarial testset:3.9900%
0002 epoch rmt trained classifier loss on adversarial testset:3.0376126766204834


2epoch learning rate:0.001


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 3/20] [Batch 1/17] [Batch classify loss: 1.496836]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 3/20] [Batch 2/17] [Batch classify loss: 1.533612]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 3/20] [Batch 3/17] [Batch classify loss: 1.517519]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 3/20] [Batch 4/17] [Batch classify loss: 1.538043]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 3/20] [Batch 5/17] [Batch classify loss: 1.489719]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 3/20] [Batch 6/17] [Batch classify loss: 1.473065]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 3/20] [Batch 7/17] [Batch classify loss: 1.479849]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 3/20] [Batch 8/17] [Batch classify loss: 1.482719]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 3/20] [Batch 9/17] [Batch classify loss: 1.535727]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 3/20] [Batch 10/17] [Batch classify loss: 1.526469]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 3/20] [Batch 11/17] [Batch classify loss: 1.517043]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 3/20] [Batch 12/17] [Batch classify loss: 1.514725]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 3/20] [Batch 13/17] [Batch classify loss: 1.534482]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 3/20] [Batch 14/17] [Batch classify loss: 1.525932]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 3/20] [Batch 15/17] [Batch classify loss: 1.508854]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 3/20] [Batch 16/17] [Batch classify loss: 1.513395]


inputs.shape: torch.Size([407, 3, 32, 32])
targets.shape: torch.Size([407, 10])
[Epoch 3/20] [Batch 17/17] [Batch classify loss: 1.501588]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 10
batch_size: 1024
epoch_correct_num: tensor(7319)
0003 epoch rmt trained classifier accuary on the clean testing examples:73.1900%
0003 epoch rmt trained classifier loss on the clean testing examples:0.9485
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 10
batch_size: 1024
epoch_correct_num: tensor(374)
0003 epoch rmt trained classifier accuary on adversarial testset:3.7400%
0003 epoch rmt trained classifier loss on adversarial testset:3.0793612003326416


3epoch learning rate:0.001


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 4/20] [Batch 1/17] [Batch classify loss: 1.370885]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 4/20] [Batch 2/17] [Batch classify loss: 1.336016]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 4/20] [Batch 3/17] [Batch classify loss: 1.362974]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 4/20] [Batch 4/17] [Batch classify loss: 1.373623]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 4/20] [Batch 5/17] [Batch classify loss: 1.427010]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 4/20] [Batch 6/17] [Batch classify loss: 1.399503]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 4/20] [Batch 7/17] [Batch classify loss: 1.394889]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 4/20] [Batch 8/17] [Batch classify loss: 1.386575]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 4/20] [Batch 9/17] [Batch classify loss: 1.445589]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 4/20] [Batch 10/17] [Batch classify loss: 1.401947]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 4/20] [Batch 11/17] [Batch classify loss: 1.366265]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 4/20] [Batch 12/17] [Batch classify loss: 1.373520]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 4/20] [Batch 13/17] [Batch classify loss: 1.404845]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 4/20] [Batch 14/17] [Batch classify loss: 1.451838]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 4/20] [Batch 15/17] [Batch classify loss: 1.373821]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 4/20] [Batch 16/17] [Batch classify loss: 1.447076]


inputs.shape: torch.Size([407, 3, 32, 32])
targets.shape: torch.Size([407, 10])
[Epoch 4/20] [Batch 17/17] [Batch classify loss: 1.415997]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 10
batch_size: 1024
epoch_correct_num: tensor(7252)
0004 epoch rmt trained classifier accuary on the clean testing examples:72.5200%
0004 epoch rmt trained classifier loss on the clean testing examples:0.9711
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 10
batch_size: 1024
epoch_correct_num: tensor(354)
0004 epoch rmt trained classifier accuary on adversarial testset:3.5400%
0004 epoch rmt trained classifier loss on adversarial testset:3.185776710510254


4epoch learning rate:0.001


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 5/20] [Batch 1/17] [Batch classify loss: 1.241215]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 5/20] [Batch 2/17] [Batch classify loss: 1.211167]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 5/20] [Batch 3/17] [Batch classify loss: 1.189982]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 5/20] [Batch 4/17] [Batch classify loss: 1.179254]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 5/20] [Batch 5/17] [Batch classify loss: 1.225532]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 5/20] [Batch 6/17] [Batch classify loss: 1.261245]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 5/20] [Batch 7/17] [Batch classify loss: 1.236658]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 5/20] [Batch 8/17] [Batch classify loss: 1.212118]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 5/20] [Batch 9/17] [Batch classify loss: 1.278471]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 5/20] [Batch 10/17] [Batch classify loss: 1.278109]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 5/20] [Batch 11/17] [Batch classify loss: 1.335301]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 5/20] [Batch 12/17] [Batch classify loss: 1.311244]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 5/20] [Batch 13/17] [Batch classify loss: 1.314560]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 5/20] [Batch 14/17] [Batch classify loss: 1.307637]


inputs.shape: torch.Size([1024, 3, 32, 32])
targets.shape: torch.Size([1024, 10])
[Epoch 5/20] [Batch 15/17] [Batch classify loss: 1.297079]


Traceback (most recent call last):
  File "tasklauncher-20210922.py", line 129, in <module>
    target_classifier.rmt(args,cle_w_train,cle_y_train,cle_x_test,cle_y_test,adv_x_test,adv_y_test,exp_result_dir,stylegan2ada_config_kwargs)
  File "/home/maggie/mmat/clamodels/classifier.py", line 1400, in rmt
    inputs, targets = mixup_data(args, exp_result_dir, stylegan2ada_config_kwargs, inputs, targets)      #   混合样本 two-hot标签
  File "/home/maggie/mmat/clamodels/classifier.py", line 1795, in mixup_data
    mix_x_train, mix_y_train = generate_model.generate()
  File "/home/maggie/mmat/genmodels/mixgenerate.py", line 483, in generate
    self._model.generate(self._exp_result_dir, self.mix_w_train, self.mix_y_train)
  File "/home/maggie/mmat/genmodels/stylegan2ada.py", line 1935, in generate
    generated_x_set, generated_y_set = self.__generatemain__(self._args, self._exp_result_dir, interpolated_w_set, interpolated_y_set)
  File "/home/maggie/mmat/genmodels/stylegan2ada.py", line 1946, in __generatemain__
    generated_x_set, generated_y_set = self.__generatefromntensor__()
  File "/home/maggie/mmat/genmodels/stylegan2ada.py", line 2029, in __generatefromntensor__
    interpolated_y = interpolated_y_set,
  File "/home/maggie/mmat/genmodels/stylegan2ada.py", line 2098, in __getgeneratedbatchxy__
    img = G.synthesis(w.unsqueeze(0), noise_mode=noise_mode).cpu()
  File "/home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "<string>", line 479, in forward
  File "/home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "<string>", line 413, in forward
  File "/home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "<string>", line 308, in forward
  File "/home/maggie/mmat/utils/stylegan2ada/torch_utils/misc.py", line 102, in decorator
    return fn(*args, **kwargs)
  File "<string>", line 83, in modulated_conv2d
KeyboardInterrupt


---------------------------------------
Torch cuda is available
args.subcommand=run, run the command line
date: 20210922
Experiment result save dir: /home/maggie/mmat/result/defense/rmt/fgsm/basemixup-uniformsampler/resnet18-cifar10/20210922/00001
initilize the dataset loading parameters
load cifar10 dataset
Loading *cifar10* train dataloader finished !
Loading *cifar10* test dataloader finished !
initlize classifier
learned calssify model != None
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(7800)
Accuary of before rmt trained classifier on clean testset:78.0000%
Loss of before mmat trained classifier clean testset:0.7850136160850525
cle_w_train.shape: torch.Size([16808, 8, 512])
cle_y_train.shape: torch.Size([16808, 8])
cle_x_test.shape: torch.Size([10000, 3, 32, 32])
cle_y_test.shape: torch.Size([10000])
adv_x_test.shape: torch.Size([10000, 3, 32, 32])
adv_y_test.shape: torch.Size([10000])
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(382)
Accuary of before rmt trained classifier on adversarial testset:3.8200%
Loss of before mmat trained classifier on adversarial testset:8.533353805541992


0epoch learning rate:0.01
Setting up PyTorch plugin "bias_act_plugin"... /home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/torch/utils/cpp_extension.py:286: UserWarning: 

                               !! WARNING !!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Your compiler (c++) is not compatible with the compiler Pytorch was
built with for this platform, which is g++ on linux. Please
use g++ to to compile your extension. Alternatively, you may
compile PyTorch from source using c++, and then you can also use
c++ to compile your extension.

See https://github.com/pytorch/pytorch/blob/master/CONTRIBUTING.md for help
with compiling PyTorch from source.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

                              !! WARNING !!

  platform=sys.platform))
Done.
Setting up PyTorch plugin "upfirdn2d_plugin"... /home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/torch/utils/cpp_extension.py:286: UserWarning: 

                               !! WARNING !!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Your compiler (c++) is not compatible with the compiler Pytorch was
built with for this platform, which is g++ on linux. Please
use g++ to to compile your extension. Alternatively, you may
compile PyTorch from source using c++, and then you can also use
c++ to compile your extension.

See https://github.com/pytorch/pytorch/blob/master/CONTRIBUTING.md for help
with compiling PyTorch from source.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

                              !! WARNING !!

  platform=sys.platform))
Done.
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 1/66] [Batch classify loss: 3.392563]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 2/66] [Batch classify loss: 2.465636]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 3/66] [Batch classify loss: 1.991624]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 4/66] [Batch classify loss: 1.895943]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 5/66] [Batch classify loss: 1.722015]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 6/66] [Batch classify loss: 1.813110]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 7/66] [Batch classify loss: 1.841359]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 8/66] [Batch classify loss: 1.802778]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 9/66] [Batch classify loss: 1.779015]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 10/66] [Batch classify loss: 1.702469]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 11/66] [Batch classify loss: 1.697626]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 12/66] [Batch classify loss: 1.795804]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 13/66] [Batch classify loss: 1.677022]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 14/66] [Batch classify loss: 1.782957]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 15/66] [Batch classify loss: 1.715250]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 16/66] [Batch classify loss: 1.720144]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 17/66] [Batch classify loss: 1.693593]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 18/66] [Batch classify loss: 1.709190]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 19/66] [Batch classify loss: 1.615604]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 20/66] [Batch classify loss: 1.815792]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 21/66] [Batch classify loss: 1.640396]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 22/66] [Batch classify loss: 1.678284]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 23/66] [Batch classify loss: 1.775663]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 24/66] [Batch classify loss: 1.769461]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 25/66] [Batch classify loss: 1.734522]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 26/66] [Batch classify loss: 1.604652]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 27/66] [Batch classify loss: 1.736569]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 28/66] [Batch classify loss: 1.701416]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 29/66] [Batch classify loss: 1.626626]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 30/66] [Batch classify loss: 1.700074]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 31/66] [Batch classify loss: 1.711681]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 32/66] [Batch classify loss: 1.615225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 33/66] [Batch classify loss: 1.592712]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 34/66] [Batch classify loss: 1.638274]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 35/66] [Batch classify loss: 1.620721]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 36/66] [Batch classify loss: 1.698294]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 37/66] [Batch classify loss: 1.669893]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 38/66] [Batch classify loss: 1.658267]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 39/66] [Batch classify loss: 1.583676]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 40/66] [Batch classify loss: 1.699824]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 41/66] [Batch classify loss: 1.664100]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 42/66] [Batch classify loss: 1.713377]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 43/66] [Batch classify loss: 1.652538]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 44/66] [Batch classify loss: 1.668711]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 45/66] [Batch classify loss: 1.633386]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 46/66] [Batch classify loss: 1.658386]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 47/66] [Batch classify loss: 1.588027]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 48/66] [Batch classify loss: 1.653639]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 49/66] [Batch classify loss: 1.665597]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 50/66] [Batch classify loss: 1.697535]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 51/66] [Batch classify loss: 1.731111]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 52/66] [Batch classify loss: 1.510652]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 53/66] [Batch classify loss: 1.742899]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 54/66] [Batch classify loss: 1.729100]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 55/66] [Batch classify loss: 1.622047]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 56/66] [Batch classify loss: 1.522066]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 57/66] [Batch classify loss: 1.754201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 58/66] [Batch classify loss: 1.648654]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 59/66] [Batch classify loss: 1.612351]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 60/66] [Batch classify loss: 1.606794]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 61/66] [Batch classify loss: 1.566810]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 62/66] [Batch classify loss: 1.772453]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 63/66] [Batch classify loss: 1.541559]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 64/66] [Batch classify loss: 1.677933]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 65/66] [Batch classify loss: 1.644034]
inputs.shape: torch.Size([168, 3, 32, 32])
targets.shape: torch.Size([168, 10])
[Epoch 1/50] [Batch 66/66] [Batch classify loss: 1.749643]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(6243)
0001 epoch rmt trained classifier accuary on the clean testing examples:62.4300%
0001 epoch rmt trained classifier loss on the clean testing examples:1.2035
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(240)
0001 epoch rmt trained classifier accuary on adversarial testset:2.4000%
0001 epoch rmt trained classifier loss on adversarial testset:3.2780749797821045


1epoch learning rate:0.01
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 1/66] [Batch classify loss: 1.435165]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 2/66] [Batch classify loss: 1.428972]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 3/66] [Batch classify loss: 1.460044]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 4/66] [Batch classify loss: 1.538830]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 5/66] [Batch classify loss: 1.558059]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 6/66] [Batch classify loss: 1.473190]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 7/66] [Batch classify loss: 1.429554]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 8/66] [Batch classify loss: 1.626425]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 9/66] [Batch classify loss: 1.607797]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 10/66] [Batch classify loss: 1.579975]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 11/66] [Batch classify loss: 1.487642]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 12/66] [Batch classify loss: 1.472061]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 13/66] [Batch classify loss: 1.470541]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 14/66] [Batch classify loss: 1.565087]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 15/66] [Batch classify loss: 1.523640]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 16/66] [Batch classify loss: 1.448222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 17/66] [Batch classify loss: 1.517850]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 18/66] [Batch classify loss: 1.478858]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 19/66] [Batch classify loss: 1.548089]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 20/66] [Batch classify loss: 1.406700]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 21/66] [Batch classify loss: 1.528990]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 22/66] [Batch classify loss: 1.542900]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 23/66] [Batch classify loss: 1.527538]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 24/66] [Batch classify loss: 1.526331]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 25/66] [Batch classify loss: 1.490772]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 26/66] [Batch classify loss: 1.563869]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 27/66] [Batch classify loss: 1.513463]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 28/66] [Batch classify loss: 1.550790]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 29/66] [Batch classify loss: 1.452350]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 30/66] [Batch classify loss: 1.475009]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 31/66] [Batch classify loss: 1.534869]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 32/66] [Batch classify loss: 1.447559]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 33/66] [Batch classify loss: 1.517140]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 34/66] [Batch classify loss: 1.438625]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 35/66] [Batch classify loss: 1.487979]
Traceback (most recent call last):
  File "tasklauncher-20210922.py", line 129, in <module>
    target_classifier.rmt(args,cle_w_train,cle_y_train,cle_x_test,cle_y_test,adv_x_test,adv_y_test,exp_result_dir,stylegan2ada_config_kwargs)
  File "/home/maggie/mmat/clamodels/classifier.py", line 1400, in rmt
    inputs, targets = mixup_data(args, exp_result_dir, stylegan2ada_config_kwargs, inputs, targets)      #   混合样本 two-hot标签
  File "/home/maggie/mmat/clamodels/classifier.py", line 1795, in mixup_data
    mix_x_train, mix_y_train = generate_model.generate()
  File "/home/maggie/mmat/genmodels/mixgenerate.py", line 483, in generate
    self._model.generate(self._exp_result_dir, self.mix_w_train, self.mix_y_train)
  File "/home/maggie/mmat/genmodels/stylegan2ada.py", line 1935, in generate
    generated_x_set, generated_y_set = self.__generatemain__(self._args, self._exp_result_dir, interpolated_w_set, interpolated_y_set)
  File "/home/maggie/mmat/genmodels/stylegan2ada.py", line 1946, in __generatemain__
    generated_x_set, generated_y_set = self.__generatefromntensor__()
  File "/home/maggie/mmat/genmodels/stylegan2ada.py", line 2029, in __generatefromntensor__
    interpolated_y = interpolated_y_set,
  File "/home/maggie/mmat/genmodels/stylegan2ada.py", line 2098, in __getgeneratedbatchxy__
    img = G.synthesis(w.unsqueeze(0), noise_mode=noise_mode).cpu()
  File "/home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "<string>", line 479, in forward
  File "/home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "<string>", line 421, in forward
  File "/home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "<string>", line 330, in forward
  File "/home/maggie/mmat/utils/stylegan2ada/torch_utils/misc.py", line 102, in decorator
    return fn(*args, **kwargs)
  File "<string>", line 64, in modulated_conv2d
KeyboardInterrupt


---------------------------------------
Torch cuda is available
args.subcommand=run, run the command line
date: 20210922
Experiment result save dir: /home/maggie/mmat/result/defense/rmt/fgsm/basemixup-betasampler/resnet18-cifar10/20210922/00000
initilize the dataset loading parameters
load cifar10 dataset
Loading *cifar10* train dataloader finished !
Loading *cifar10* test dataloader finished !
initlize classifier
learned calssify model != None
Traceback (most recent call last):
  File "tasklauncher-20210922.py", line 118, in <module>
    adv_x_test, adv_y_test = target_classifier.getadvset(adv_testset_path)
  File "/home/maggie/mmat/clamodels/classifier.py", line 756, in getadvset
    adv_xset_tensor, adv_yset_tensor = self.__getadvsettensor__(adv_dataset_path)
  File "/home/maggie/mmat/clamodels/classifier.py", line 772, in __getadvsettensor__
    load_adv_img = np.load(adv_npz_path)['w']            
  File "/home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/numpy/lib/npyio.py", line 255, in __getitem__
    pickle_kwargs=self.pickle_kwargs)
  File "/home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/numpy/lib/format.py", line 763, in read_array
    data = _read_bytes(fp, read_size, "array data")
  File "/home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/numpy/lib/format.py", line 892, in _read_bytes
    r = fp.read(size - len(data))
  File "/home/xieyi/anaconda3/envs/mmat/lib/python3.7/zipfile.py", line 936, in read
    buf += data
KeyboardInterrupt


---------------------------------------
Torch cuda is available
args.subcommand=run, run the command line
date: 20210922
Experiment result save dir: /home/maggie/mmat/result/defense/rmt/fgsm/basemixup-betasampler/resnet18-cifar10/20210922/00001
initilize the dataset loading parameters
load cifar10 dataset
Loading *cifar10* train dataloader finished !
Loading *cifar10* test dataloader finished !
initlize classifier
learned calssify model != None
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(7800)
Accuary of before rmt trained classifier on clean testset:78.0000%
Loss of before mmat trained classifier clean testset:0.7850136160850525
cle_w_train.shape: torch.Size([16815, 8, 512])
cle_y_train.shape: torch.Size([16815, 8])
cle_x_test.shape: torch.Size([10000, 3, 32, 32])
cle_y_test.shape: torch.Size([10000])
adv_x_test.shape: torch.Size([10000, 3, 32, 32])
adv_y_test.shape: torch.Size([10000])
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(382)
Accuary of before rmt trained classifier on adversarial testset:3.8200%
Loss of before mmat trained classifier on adversarial testset:8.53335952758789


0epoch learning rate:0.001
Setting up PyTorch plugin "bias_act_plugin"... /home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/torch/utils/cpp_extension.py:286: UserWarning: 

                               !! WARNING !!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Your compiler (c++) is not compatible with the compiler Pytorch was
built with for this platform, which is g++ on linux. Please
use g++ to to compile your extension. Alternatively, you may
compile PyTorch from source using c++, and then you can also use
c++ to compile your extension.

See https://github.com/pytorch/pytorch/blob/master/CONTRIBUTING.md for help
with compiling PyTorch from source.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

                              !! WARNING !!

  platform=sys.platform))
Done.
Setting up PyTorch plugin "upfirdn2d_plugin"... /home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/torch/utils/cpp_extension.py:286: UserWarning: 

                               !! WARNING !!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Your compiler (c++) is not compatible with the compiler Pytorch was
built with for this platform, which is g++ on linux. Please
use g++ to to compile your extension. Alternatively, you may
compile PyTorch from source using c++, and then you can also use
c++ to compile your extension.

See https://github.com/pytorch/pytorch/blob/master/CONTRIBUTING.md for help
with compiling PyTorch from source.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

                              !! WARNING !!

  platform=sys.platform))
Done.
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 1/66] [Batch classify loss: 4.401280]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 2/66] [Batch classify loss: 4.133636]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 3/66] [Batch classify loss: 3.762681]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 4/66] [Batch classify loss: 3.719323]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 5/66] [Batch classify loss: 3.272230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 6/66] [Batch classify loss: 3.238286]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 7/66] [Batch classify loss: 3.077194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 8/66] [Batch classify loss: 2.970893]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 9/66] [Batch classify loss: 3.077449]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 10/66] [Batch classify loss: 2.934510]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 11/66] [Batch classify loss: 2.711711]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 12/66] [Batch classify loss: 2.659599]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 13/66] [Batch classify loss: 2.672730]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 14/66] [Batch classify loss: 2.383551]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 15/66] [Batch classify loss: 2.500332]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 16/66] [Batch classify loss: 2.362463]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 17/66] [Batch classify loss: 2.262740]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 18/66] [Batch classify loss: 2.097446]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 19/66] [Batch classify loss: 2.197765]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 20/66] [Batch classify loss: 2.212834]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 21/66] [Batch classify loss: 2.032744]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 22/66] [Batch classify loss: 2.057035]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 23/66] [Batch classify loss: 2.124866]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 24/66] [Batch classify loss: 2.031506]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 25/66] [Batch classify loss: 1.773385]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 26/66] [Batch classify loss: 1.937652]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 27/66] [Batch classify loss: 1.901805]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 28/66] [Batch classify loss: 1.862409]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 29/66] [Batch classify loss: 1.870933]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 30/66] [Batch classify loss: 1.830785]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 31/66] [Batch classify loss: 1.734200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 32/66] [Batch classify loss: 1.779987]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 33/66] [Batch classify loss: 1.835149]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 34/66] [Batch classify loss: 1.768281]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 35/66] [Batch classify loss: 1.808205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 36/66] [Batch classify loss: 1.760443]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 37/66] [Batch classify loss: 1.816064]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 38/66] [Batch classify loss: 1.825198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 39/66] [Batch classify loss: 1.744652]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 40/66] [Batch classify loss: 1.775867]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 41/66] [Batch classify loss: 1.794500]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 42/66] [Batch classify loss: 1.785573]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 43/66] [Batch classify loss: 1.809051]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 44/66] [Batch classify loss: 1.719784]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 45/66] [Batch classify loss: 1.793735]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 46/66] [Batch classify loss: 1.722477]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 47/66] [Batch classify loss: 1.794469]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 48/66] [Batch classify loss: 1.748811]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 49/66] [Batch classify loss: 1.787027]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 50/66] [Batch classify loss: 1.752798]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 51/66] [Batch classify loss: 1.741082]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 52/66] [Batch classify loss: 1.713704]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 53/66] [Batch classify loss: 1.745151]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 54/66] [Batch classify loss: 1.755641]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 55/66] [Batch classify loss: 1.810157]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 56/66] [Batch classify loss: 1.708130]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 57/66] [Batch classify loss: 1.729167]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 58/66] [Batch classify loss: 1.860853]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 59/66] [Batch classify loss: 1.771845]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 60/66] [Batch classify loss: 1.711132]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 61/66] [Batch classify loss: 1.731748]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 62/66] [Batch classify loss: 1.771167]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 63/66] [Batch classify loss: 1.780537]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 64/66] [Batch classify loss: 1.761063]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 1/50] [Batch 65/66] [Batch classify loss: 1.773426]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 1/50] [Batch 66/66] [Batch classify loss: 1.800829]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(7140)
0001 epoch rmt trained classifier accuary on the clean testing examples:71.4000%
0001 epoch rmt trained classifier loss on the clean testing examples:1.0535
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(455)
0001 epoch rmt trained classifier accuary on adversarial testset:4.5500%
0001 epoch rmt trained classifier loss on adversarial testset:2.9118285179138184


1epoch learning rate:0.001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 1/66] [Batch classify loss: 1.723968]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 2/66] [Batch classify loss: 1.714444]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 3/66] [Batch classify loss: 1.647880]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 4/66] [Batch classify loss: 1.728045]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 5/66] [Batch classify loss: 1.707285]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 6/66] [Batch classify loss: 1.777413]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 7/66] [Batch classify loss: 1.676630]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 8/66] [Batch classify loss: 1.730374]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 9/66] [Batch classify loss: 1.677665]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 10/66] [Batch classify loss: 1.663027]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 11/66] [Batch classify loss: 1.742332]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 12/66] [Batch classify loss: 1.744643]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 13/66] [Batch classify loss: 1.841968]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 14/66] [Batch classify loss: 1.629337]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 15/66] [Batch classify loss: 1.695098]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 16/66] [Batch classify loss: 1.687030]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 17/66] [Batch classify loss: 1.694829]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 18/66] [Batch classify loss: 1.746660]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 19/66] [Batch classify loss: 1.673025]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 20/66] [Batch classify loss: 1.692134]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 21/66] [Batch classify loss: 1.677647]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 22/66] [Batch classify loss: 1.634561]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 23/66] [Batch classify loss: 1.713110]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 24/66] [Batch classify loss: 1.700355]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 25/66] [Batch classify loss: 1.681382]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 26/66] [Batch classify loss: 1.685289]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 27/66] [Batch classify loss: 1.731050]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 28/66] [Batch classify loss: 1.677867]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 29/66] [Batch classify loss: 1.639796]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 30/66] [Batch classify loss: 1.647400]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 31/66] [Batch classify loss: 1.752180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 32/66] [Batch classify loss: 1.696842]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 33/66] [Batch classify loss: 1.718226]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 34/66] [Batch classify loss: 1.646695]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 35/66] [Batch classify loss: 1.720102]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 36/66] [Batch classify loss: 1.620841]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 37/66] [Batch classify loss: 1.678402]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 38/66] [Batch classify loss: 1.693753]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 39/66] [Batch classify loss: 1.747403]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 40/66] [Batch classify loss: 1.685160]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 41/66] [Batch classify loss: 1.675704]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 42/66] [Batch classify loss: 1.722000]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 43/66] [Batch classify loss: 1.733767]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 44/66] [Batch classify loss: 1.681552]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 45/66] [Batch classify loss: 1.775986]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 46/66] [Batch classify loss: 1.702035]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 47/66] [Batch classify loss: 1.685634]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 48/66] [Batch classify loss: 1.690857]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 49/66] [Batch classify loss: 1.659228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 50/66] [Batch classify loss: 1.717974]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 51/66] [Batch classify loss: 1.691087]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 52/66] [Batch classify loss: 1.702032]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 53/66] [Batch classify loss: 1.702952]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 54/66] [Batch classify loss: 1.688116]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 55/66] [Batch classify loss: 1.739853]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 56/66] [Batch classify loss: 1.804754]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 57/66] [Batch classify loss: 1.695208]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 58/66] [Batch classify loss: 1.717640]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 59/66] [Batch classify loss: 1.778574]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 60/66] [Batch classify loss: 1.757499]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 61/66] [Batch classify loss: 1.662009]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 62/66] [Batch classify loss: 1.673375]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 63/66] [Batch classify loss: 1.691477]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 64/66] [Batch classify loss: 1.725421]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 2/50] [Batch 65/66] [Batch classify loss: 1.715187]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 2/50] [Batch 66/66] [Batch classify loss: 1.792539]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(7407)
0002 epoch rmt trained classifier accuary on the clean testing examples:74.0700%
0002 epoch rmt trained classifier loss on the clean testing examples:1.0094
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(413)
0002 epoch rmt trained classifier accuary on adversarial testset:4.1300%
0002 epoch rmt trained classifier loss on adversarial testset:2.8889057636260986


2epoch learning rate:0.001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 1/66] [Batch classify loss: 1.574137]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 2/66] [Batch classify loss: 1.622376]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 3/66] [Batch classify loss: 1.546184]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 4/66] [Batch classify loss: 1.539180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 5/66] [Batch classify loss: 1.532854]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 6/66] [Batch classify loss: 1.595522]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 7/66] [Batch classify loss: 1.524098]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 8/66] [Batch classify loss: 1.573235]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 9/66] [Batch classify loss: 1.580603]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 10/66] [Batch classify loss: 1.601258]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 11/66] [Batch classify loss: 1.563323]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 12/66] [Batch classify loss: 1.578579]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 13/66] [Batch classify loss: 1.626339]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 14/66] [Batch classify loss: 1.578601]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 15/66] [Batch classify loss: 1.608403]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 16/66] [Batch classify loss: 1.530855]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 17/66] [Batch classify loss: 1.632764]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 18/66] [Batch classify loss: 1.561810]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 19/66] [Batch classify loss: 1.602080]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 20/66] [Batch classify loss: 1.560344]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 21/66] [Batch classify loss: 1.671175]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 22/66] [Batch classify loss: 1.618056]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 23/66] [Batch classify loss: 1.647948]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 24/66] [Batch classify loss: 1.620763]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 25/66] [Batch classify loss: 1.642371]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 26/66] [Batch classify loss: 1.634369]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 27/66] [Batch classify loss: 1.672908]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 28/66] [Batch classify loss: 1.577380]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 29/66] [Batch classify loss: 1.669782]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 30/66] [Batch classify loss: 1.551220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 31/66] [Batch classify loss: 1.615555]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 32/66] [Batch classify loss: 1.521808]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 33/66] [Batch classify loss: 1.659793]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 34/66] [Batch classify loss: 1.594270]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 35/66] [Batch classify loss: 1.710732]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 36/66] [Batch classify loss: 1.605106]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 37/66] [Batch classify loss: 1.635792]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 38/66] [Batch classify loss: 1.625790]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 39/66] [Batch classify loss: 1.700415]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 40/66] [Batch classify loss: 1.604079]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 41/66] [Batch classify loss: 1.616417]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 42/66] [Batch classify loss: 1.581965]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 43/66] [Batch classify loss: 1.625551]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 44/66] [Batch classify loss: 1.591339]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 45/66] [Batch classify loss: 1.659105]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 46/66] [Batch classify loss: 1.504595]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 47/66] [Batch classify loss: 1.673954]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 48/66] [Batch classify loss: 1.689066]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 49/66] [Batch classify loss: 1.676170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 50/66] [Batch classify loss: 1.624414]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 51/66] [Batch classify loss: 1.617777]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 52/66] [Batch classify loss: 1.608928]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 53/66] [Batch classify loss: 1.647101]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 54/66] [Batch classify loss: 1.696485]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 55/66] [Batch classify loss: 1.704636]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 56/66] [Batch classify loss: 1.634431]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 57/66] [Batch classify loss: 1.641080]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 58/66] [Batch classify loss: 1.548783]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 59/66] [Batch classify loss: 1.665786]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 60/66] [Batch classify loss: 1.648070]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 61/66] [Batch classify loss: 1.584721]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 62/66] [Batch classify loss: 1.646475]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 63/66] [Batch classify loss: 1.637268]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 64/66] [Batch classify loss: 1.714305]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 3/50] [Batch 65/66] [Batch classify loss: 1.651096]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 3/50] [Batch 66/66] [Batch classify loss: 1.629874]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(7256)
0003 epoch rmt trained classifier accuary on the clean testing examples:72.5600%
0003 epoch rmt trained classifier loss on the clean testing examples:1.0085
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(470)
0003 epoch rmt trained classifier accuary on adversarial testset:4.7000%
0003 epoch rmt trained classifier loss on adversarial testset:2.9979302883148193


3epoch learning rate:0.001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 1/66] [Batch classify loss: 1.564719]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 2/66] [Batch classify loss: 1.447076]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 3/66] [Batch classify loss: 1.376011]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 4/66] [Batch classify loss: 1.397039]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 5/66] [Batch classify loss: 1.424947]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 6/66] [Batch classify loss: 1.353086]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 7/66] [Batch classify loss: 1.492855]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 8/66] [Batch classify loss: 1.520010]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 9/66] [Batch classify loss: 1.500825]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 10/66] [Batch classify loss: 1.544516]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 11/66] [Batch classify loss: 1.512699]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 12/66] [Batch classify loss: 1.462296]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 13/66] [Batch classify loss: 1.511938]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 14/66] [Batch classify loss: 1.434875]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 15/66] [Batch classify loss: 1.465825]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 16/66] [Batch classify loss: 1.436966]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 17/66] [Batch classify loss: 1.437807]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 18/66] [Batch classify loss: 1.512648]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 19/66] [Batch classify loss: 1.360505]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 20/66] [Batch classify loss: 1.538499]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 21/66] [Batch classify loss: 1.545879]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 22/66] [Batch classify loss: 1.471364]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 23/66] [Batch classify loss: 1.492416]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 24/66] [Batch classify loss: 1.468782]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 25/66] [Batch classify loss: 1.556790]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 26/66] [Batch classify loss: 1.477686]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 27/66] [Batch classify loss: 1.519495]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 28/66] [Batch classify loss: 1.477464]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 29/66] [Batch classify loss: 1.585380]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 30/66] [Batch classify loss: 1.515717]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 31/66] [Batch classify loss: 1.476792]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 32/66] [Batch classify loss: 1.513659]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 33/66] [Batch classify loss: 1.472948]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 34/66] [Batch classify loss: 1.493928]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 35/66] [Batch classify loss: 1.547981]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 36/66] [Batch classify loss: 1.473376]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 37/66] [Batch classify loss: 1.588585]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 38/66] [Batch classify loss: 1.477410]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 39/66] [Batch classify loss: 1.503743]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 40/66] [Batch classify loss: 1.509477]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 41/66] [Batch classify loss: 1.558951]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 42/66] [Batch classify loss: 1.515185]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 43/66] [Batch classify loss: 1.558662]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 44/66] [Batch classify loss: 1.530146]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 45/66] [Batch classify loss: 1.519516]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 46/66] [Batch classify loss: 1.484624]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 47/66] [Batch classify loss: 1.499891]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 48/66] [Batch classify loss: 1.559755]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 49/66] [Batch classify loss: 1.486125]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 50/66] [Batch classify loss: 1.539910]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 51/66] [Batch classify loss: 1.576386]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 52/66] [Batch classify loss: 1.563266]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 53/66] [Batch classify loss: 1.521542]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 54/66] [Batch classify loss: 1.603521]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 55/66] [Batch classify loss: 1.542173]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 56/66] [Batch classify loss: 1.490693]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 57/66] [Batch classify loss: 1.517895]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 58/66] [Batch classify loss: 1.558020]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 59/66] [Batch classify loss: 1.482320]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 60/66] [Batch classify loss: 1.568398]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 61/66] [Batch classify loss: 1.506889]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 62/66] [Batch classify loss: 1.462818]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 63/66] [Batch classify loss: 1.549385]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 64/66] [Batch classify loss: 1.572831]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 4/50] [Batch 65/66] [Batch classify loss: 1.479081]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 4/50] [Batch 66/66] [Batch classify loss: 1.580998]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(7148)
0004 epoch rmt trained classifier accuary on the clean testing examples:71.4800%
0004 epoch rmt trained classifier loss on the clean testing examples:1.0353
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(403)
0004 epoch rmt trained classifier accuary on adversarial testset:4.0300%
0004 epoch rmt trained classifier loss on adversarial testset:3.1080875396728516


4epoch learning rate:0.001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 1/66] [Batch classify loss: 1.442366]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 2/66] [Batch classify loss: 1.286444]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 3/66] [Batch classify loss: 1.280043]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 4/66] [Batch classify loss: 1.174620]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 5/66] [Batch classify loss: 1.254206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 6/66] [Batch classify loss: 1.182933]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 7/66] [Batch classify loss: 1.248341]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 8/66] [Batch classify loss: 1.292788]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 9/66] [Batch classify loss: 1.222847]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 10/66] [Batch classify loss: 1.253214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 11/66] [Batch classify loss: 1.231332]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 12/66] [Batch classify loss: 1.258100]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 13/66] [Batch classify loss: 1.245332]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 14/66] [Batch classify loss: 1.363481]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 15/66] [Batch classify loss: 1.294573]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 16/66] [Batch classify loss: 1.331443]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 17/66] [Batch classify loss: 1.269112]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 18/66] [Batch classify loss: 1.307404]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 19/66] [Batch classify loss: 1.292821]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 20/66] [Batch classify loss: 1.316749]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 21/66] [Batch classify loss: 1.274172]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 22/66] [Batch classify loss: 1.306361]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 23/66] [Batch classify loss: 1.391943]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 24/66] [Batch classify loss: 1.363489]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 25/66] [Batch classify loss: 1.320130]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 26/66] [Batch classify loss: 1.287935]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 27/66] [Batch classify loss: 1.346191]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 28/66] [Batch classify loss: 1.280477]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 29/66] [Batch classify loss: 1.344428]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 30/66] [Batch classify loss: 1.486985]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 31/66] [Batch classify loss: 1.337765]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 32/66] [Batch classify loss: 1.281643]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 33/66] [Batch classify loss: 1.297975]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 34/66] [Batch classify loss: 1.223853]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 35/66] [Batch classify loss: 1.315708]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 36/66] [Batch classify loss: 1.278467]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 37/66] [Batch classify loss: 1.386461]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 38/66] [Batch classify loss: 1.336562]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 39/66] [Batch classify loss: 1.354783]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 40/66] [Batch classify loss: 1.387838]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 41/66] [Batch classify loss: 1.293898]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 42/66] [Batch classify loss: 1.374959]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 43/66] [Batch classify loss: 1.324257]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 44/66] [Batch classify loss: 1.478445]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 45/66] [Batch classify loss: 1.381240]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 46/66] [Batch classify loss: 1.368576]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 47/66] [Batch classify loss: 1.485908]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 48/66] [Batch classify loss: 1.387785]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 49/66] [Batch classify loss: 1.381386]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 50/66] [Batch classify loss: 1.319129]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 51/66] [Batch classify loss: 1.393902]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 52/66] [Batch classify loss: 1.420128]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 53/66] [Batch classify loss: 1.363621]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 54/66] [Batch classify loss: 1.384561]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 55/66] [Batch classify loss: 1.359852]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 56/66] [Batch classify loss: 1.404469]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 57/66] [Batch classify loss: 1.352038]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 58/66] [Batch classify loss: 1.407435]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 59/66] [Batch classify loss: 1.436279]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 60/66] [Batch classify loss: 1.463371]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 61/66] [Batch classify loss: 1.434539]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 62/66] [Batch classify loss: 1.429002]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 63/66] [Batch classify loss: 1.428404]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 64/66] [Batch classify loss: 1.351213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 5/50] [Batch 65/66] [Batch classify loss: 1.427909]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 5/50] [Batch 66/66] [Batch classify loss: 1.451255]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(6785)
0005 epoch rmt trained classifier accuary on the clean testing examples:67.8500%
0005 epoch rmt trained classifier loss on the clean testing examples:1.0934
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(360)
0005 epoch rmt trained classifier accuary on adversarial testset:3.6000%
0005 epoch rmt trained classifier loss on adversarial testset:3.305187940597534


5epoch learning rate:0.001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 1/66] [Batch classify loss: 1.190110]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 2/66] [Batch classify loss: 1.066399]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 3/66] [Batch classify loss: 0.946592]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 4/66] [Batch classify loss: 0.956078]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 5/66] [Batch classify loss: 1.022007]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 6/66] [Batch classify loss: 0.974580]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 7/66] [Batch classify loss: 0.952997]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 8/66] [Batch classify loss: 0.967485]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 9/66] [Batch classify loss: 1.001717]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 10/66] [Batch classify loss: 0.960770]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 11/66] [Batch classify loss: 1.012058]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 12/66] [Batch classify loss: 1.056081]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 13/66] [Batch classify loss: 1.090290]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 14/66] [Batch classify loss: 0.992601]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 15/66] [Batch classify loss: 1.067258]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 16/66] [Batch classify loss: 1.021326]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 17/66] [Batch classify loss: 1.047529]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 18/66] [Batch classify loss: 1.119562]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 19/66] [Batch classify loss: 1.152048]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 20/66] [Batch classify loss: 1.014479]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 21/66] [Batch classify loss: 1.155928]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 22/66] [Batch classify loss: 1.149379]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 23/66] [Batch classify loss: 1.081004]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 24/66] [Batch classify loss: 1.171440]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 25/66] [Batch classify loss: 1.081628]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 26/66] [Batch classify loss: 1.051475]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 27/66] [Batch classify loss: 1.078819]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 28/66] [Batch classify loss: 1.084687]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 29/66] [Batch classify loss: 1.193467]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 30/66] [Batch classify loss: 1.022653]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 31/66] [Batch classify loss: 1.216202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 32/66] [Batch classify loss: 1.186095]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 33/66] [Batch classify loss: 1.096346]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 34/66] [Batch classify loss: 1.228664]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 35/66] [Batch classify loss: 1.226059]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 36/66] [Batch classify loss: 1.112578]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 37/66] [Batch classify loss: 1.191200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 38/66] [Batch classify loss: 1.118759]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 39/66] [Batch classify loss: 1.194900]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 40/66] [Batch classify loss: 1.156361]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 41/66] [Batch classify loss: 1.175455]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 42/66] [Batch classify loss: 1.205974]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 43/66] [Batch classify loss: 1.222848]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 44/66] [Batch classify loss: 1.129412]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 45/66] [Batch classify loss: 1.160728]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 46/66] [Batch classify loss: 1.174371]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 47/66] [Batch classify loss: 1.138295]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 48/66] [Batch classify loss: 1.158183]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 49/66] [Batch classify loss: 1.114789]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 50/66] [Batch classify loss: 1.197077]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 51/66] [Batch classify loss: 1.212975]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 52/66] [Batch classify loss: 1.208818]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 53/66] [Batch classify loss: 1.109585]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 54/66] [Batch classify loss: 1.239080]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 55/66] [Batch classify loss: 1.201765]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 56/66] [Batch classify loss: 1.218555]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 57/66] [Batch classify loss: 1.247070]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 58/66] [Batch classify loss: 1.258501]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 59/66] [Batch classify loss: 1.288950]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 60/66] [Batch classify loss: 1.191764]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 61/66] [Batch classify loss: 1.207283]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 62/66] [Batch classify loss: 1.203084]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 63/66] [Batch classify loss: 1.187885]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 64/66] [Batch classify loss: 1.128405]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 6/50] [Batch 65/66] [Batch classify loss: 1.147830]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 6/50] [Batch 66/66] [Batch classify loss: 1.148992]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(6364)
0006 epoch rmt trained classifier accuary on the clean testing examples:63.6400%
0006 epoch rmt trained classifier loss on the clean testing examples:1.1838
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(365)
0006 epoch rmt trained classifier accuary on adversarial testset:3.6500%
0006 epoch rmt trained classifier loss on adversarial testset:3.643049955368042


6epoch learning rate:0.001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 1/66] [Batch classify loss: 0.921649]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 2/66] [Batch classify loss: 0.675586]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 3/66] [Batch classify loss: 0.662171]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 4/66] [Batch classify loss: 0.668074]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 5/66] [Batch classify loss: 0.663858]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 6/66] [Batch classify loss: 0.658958]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 7/66] [Batch classify loss: 0.682059]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 8/66] [Batch classify loss: 0.736657]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 9/66] [Batch classify loss: 0.757331]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 10/66] [Batch classify loss: 0.720829]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 11/66] [Batch classify loss: 0.759038]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 12/66] [Batch classify loss: 0.787353]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 13/66] [Batch classify loss: 0.763313]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 14/66] [Batch classify loss: 0.783592]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 15/66] [Batch classify loss: 0.787953]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 16/66] [Batch classify loss: 0.718017]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 17/66] [Batch classify loss: 0.783320]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 18/66] [Batch classify loss: 0.762132]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 19/66] [Batch classify loss: 0.834170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 20/66] [Batch classify loss: 0.789060]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 21/66] [Batch classify loss: 0.778055]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 22/66] [Batch classify loss: 0.777007]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 23/66] [Batch classify loss: 0.827206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 24/66] [Batch classify loss: 0.859596]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 25/66] [Batch classify loss: 0.792425]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 26/66] [Batch classify loss: 0.799581]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 27/66] [Batch classify loss: 0.866172]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 28/66] [Batch classify loss: 0.815979]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 29/66] [Batch classify loss: 0.861577]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 30/66] [Batch classify loss: 0.870094]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 31/66] [Batch classify loss: 0.976138]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 32/66] [Batch classify loss: 0.866462]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 33/66] [Batch classify loss: 0.880948]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 34/66] [Batch classify loss: 0.895113]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 35/66] [Batch classify loss: 0.911839]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 36/66] [Batch classify loss: 0.914527]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 37/66] [Batch classify loss: 0.921161]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 38/66] [Batch classify loss: 0.881416]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 39/66] [Batch classify loss: 0.922688]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 40/66] [Batch classify loss: 0.936308]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 41/66] [Batch classify loss: 1.027124]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 42/66] [Batch classify loss: 1.005042]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 43/66] [Batch classify loss: 0.852235]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 44/66] [Batch classify loss: 0.955502]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 45/66] [Batch classify loss: 0.976792]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 46/66] [Batch classify loss: 0.943607]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 47/66] [Batch classify loss: 0.978646]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 48/66] [Batch classify loss: 0.945263]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 49/66] [Batch classify loss: 1.019371]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 50/66] [Batch classify loss: 0.901251]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 51/66] [Batch classify loss: 0.999500]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 52/66] [Batch classify loss: 0.962577]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 53/66] [Batch classify loss: 0.913069]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 54/66] [Batch classify loss: 0.923322]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 55/66] [Batch classify loss: 0.983912]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 56/66] [Batch classify loss: 0.980087]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 57/66] [Batch classify loss: 0.921842]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 58/66] [Batch classify loss: 0.920904]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 59/66] [Batch classify loss: 0.964036]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 60/66] [Batch classify loss: 1.051320]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 61/66] [Batch classify loss: 1.030677]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 62/66] [Batch classify loss: 1.035347]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 63/66] [Batch classify loss: 1.033327]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 64/66] [Batch classify loss: 1.020378]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 7/50] [Batch 65/66] [Batch classify loss: 1.026921]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 7/50] [Batch 66/66] [Batch classify loss: 0.937625]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(6019)
0007 epoch rmt trained classifier accuary on the clean testing examples:60.1900%
0007 epoch rmt trained classifier loss on the clean testing examples:1.2572
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(345)
0007 epoch rmt trained classifier accuary on adversarial testset:3.4500%
0007 epoch rmt trained classifier loss on adversarial testset:3.9597439765930176


7epoch learning rate:0.001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 1/66] [Batch classify loss: 0.817852]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 2/66] [Batch classify loss: 0.430675]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 3/66] [Batch classify loss: 0.378871]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 4/66] [Batch classify loss: 0.403956]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 5/66] [Batch classify loss: 0.481821]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 6/66] [Batch classify loss: 0.461724]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 7/66] [Batch classify loss: 0.480558]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 8/66] [Batch classify loss: 0.475740]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 9/66] [Batch classify loss: 0.514430]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 10/66] [Batch classify loss: 0.505665]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 11/66] [Batch classify loss: 0.508442]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 12/66] [Batch classify loss: 0.499989]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 13/66] [Batch classify loss: 0.513281]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 14/66] [Batch classify loss: 0.484121]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 15/66] [Batch classify loss: 0.538177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 16/66] [Batch classify loss: 0.589229]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 17/66] [Batch classify loss: 0.592989]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 18/66] [Batch classify loss: 0.635293]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 19/66] [Batch classify loss: 0.586544]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 20/66] [Batch classify loss: 0.564431]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 21/66] [Batch classify loss: 0.556737]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 22/66] [Batch classify loss: 0.617289]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 23/66] [Batch classify loss: 0.571512]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 24/66] [Batch classify loss: 0.628630]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 25/66] [Batch classify loss: 0.642276]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 26/66] [Batch classify loss: 0.578237]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 27/66] [Batch classify loss: 0.657654]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 28/66] [Batch classify loss: 0.591206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 29/66] [Batch classify loss: 0.638155]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 30/66] [Batch classify loss: 0.635903]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 31/66] [Batch classify loss: 0.655578]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 32/66] [Batch classify loss: 0.675482]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 33/66] [Batch classify loss: 0.760453]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 34/66] [Batch classify loss: 0.656076]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 35/66] [Batch classify loss: 0.658620]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 36/66] [Batch classify loss: 0.679451]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 37/66] [Batch classify loss: 0.742351]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 38/66] [Batch classify loss: 0.697750]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 39/66] [Batch classify loss: 0.698939]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 40/66] [Batch classify loss: 0.694932]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 41/66] [Batch classify loss: 0.700470]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 42/66] [Batch classify loss: 0.601435]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 43/66] [Batch classify loss: 0.665863]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 44/66] [Batch classify loss: 0.691560]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 45/66] [Batch classify loss: 0.720827]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 46/66] [Batch classify loss: 0.707159]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 47/66] [Batch classify loss: 0.898327]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 48/66] [Batch classify loss: 0.679540]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 49/66] [Batch classify loss: 0.728068]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 50/66] [Batch classify loss: 0.769243]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 51/66] [Batch classify loss: 0.673900]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 52/66] [Batch classify loss: 0.735366]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 53/66] [Batch classify loss: 0.687480]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 54/66] [Batch classify loss: 0.765698]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 55/66] [Batch classify loss: 0.793055]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 56/66] [Batch classify loss: 0.703924]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 57/66] [Batch classify loss: 0.662781]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 58/66] [Batch classify loss: 0.745919]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 59/66] [Batch classify loss: 0.761379]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 60/66] [Batch classify loss: 0.751621]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 61/66] [Batch classify loss: 0.711869]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 62/66] [Batch classify loss: 0.771041]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 63/66] [Batch classify loss: 0.757495]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 64/66] [Batch classify loss: 0.766884]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 8/50] [Batch 65/66] [Batch classify loss: 0.768413]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 8/50] [Batch 66/66] [Batch classify loss: 0.887151]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(5490)
0008 epoch rmt trained classifier accuary on the clean testing examples:54.9000%
0008 epoch rmt trained classifier loss on the clean testing examples:1.3952
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(288)
0008 epoch rmt trained classifier accuary on adversarial testset:2.8800%
0008 epoch rmt trained classifier loss on adversarial testset:4.456404685974121


8epoch learning rate:0.001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 1/66] [Batch classify loss: 0.900357]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 2/66] [Batch classify loss: 0.233024]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 3/66] [Batch classify loss: 0.266751]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 4/66] [Batch classify loss: 0.302115]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 5/66] [Batch classify loss: 0.323588]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 6/66] [Batch classify loss: 0.312581]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 7/66] [Batch classify loss: 0.310410]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 8/66] [Batch classify loss: 0.327509]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 9/66] [Batch classify loss: 0.360324]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 10/66] [Batch classify loss: 0.370744]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 11/66] [Batch classify loss: 0.393346]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 12/66] [Batch classify loss: 0.369519]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 13/66] [Batch classify loss: 0.362710]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 14/66] [Batch classify loss: 0.393416]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 15/66] [Batch classify loss: 0.433578]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 16/66] [Batch classify loss: 0.390277]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 17/66] [Batch classify loss: 0.404707]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 18/66] [Batch classify loss: 0.442868]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 19/66] [Batch classify loss: 0.459035]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 20/66] [Batch classify loss: 0.415267]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 21/66] [Batch classify loss: 0.425303]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 22/66] [Batch classify loss: 0.444349]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 23/66] [Batch classify loss: 0.431627]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 24/66] [Batch classify loss: 0.458501]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 25/66] [Batch classify loss: 0.440129]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 26/66] [Batch classify loss: 0.531987]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 27/66] [Batch classify loss: 0.465134]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 28/66] [Batch classify loss: 0.509216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 29/66] [Batch classify loss: 0.461522]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 30/66] [Batch classify loss: 0.512177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 31/66] [Batch classify loss: 0.492129]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 32/66] [Batch classify loss: 0.514262]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 33/66] [Batch classify loss: 0.471399]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 34/66] [Batch classify loss: 0.487793]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 35/66] [Batch classify loss: 0.463383]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 36/66] [Batch classify loss: 0.595709]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 37/66] [Batch classify loss: 0.453829]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 38/66] [Batch classify loss: 0.486940]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 39/66] [Batch classify loss: 0.454582]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 40/66] [Batch classify loss: 0.499750]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 41/66] [Batch classify loss: 0.557692]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 42/66] [Batch classify loss: 0.506306]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 43/66] [Batch classify loss: 0.568000]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 44/66] [Batch classify loss: 0.542587]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 45/66] [Batch classify loss: 0.543379]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 46/66] [Batch classify loss: 0.506329]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 47/66] [Batch classify loss: 0.539984]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 48/66] [Batch classify loss: 0.551533]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 49/66] [Batch classify loss: 0.544324]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 50/66] [Batch classify loss: 0.553234]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 51/66] [Batch classify loss: 0.605233]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 52/66] [Batch classify loss: 0.528236]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 53/66] [Batch classify loss: 0.544303]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 54/66] [Batch classify loss: 0.503616]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 55/66] [Batch classify loss: 0.565543]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 56/66] [Batch classify loss: 0.630652]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 57/66] [Batch classify loss: 0.620924]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 58/66] [Batch classify loss: 0.599507]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 59/66] [Batch classify loss: 0.604544]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 60/66] [Batch classify loss: 0.597893]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 61/66] [Batch classify loss: 0.553530]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 62/66] [Batch classify loss: 0.571437]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 63/66] [Batch classify loss: 0.559306]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 64/66] [Batch classify loss: 0.541142]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 9/50] [Batch 65/66] [Batch classify loss: 0.621397]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 9/50] [Batch 66/66] [Batch classify loss: 0.609954]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(5387)
0009 epoch rmt trained classifier accuary on the clean testing examples:53.8700%
0009 epoch rmt trained classifier loss on the clean testing examples:1.4418
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(332)
0009 epoch rmt trained classifier accuary on adversarial testset:3.3200%
0009 epoch rmt trained classifier loss on adversarial testset:4.740468502044678


9epoch learning rate:0.001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 1/66] [Batch classify loss: 1.716416]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 2/66] [Batch classify loss: 0.426979]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 3/66] [Batch classify loss: 0.167405]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 4/66] [Batch classify loss: 0.163513]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 5/66] [Batch classify loss: 0.220567]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 6/66] [Batch classify loss: 0.179887]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 7/66] [Batch classify loss: 0.177057]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 8/66] [Batch classify loss: 0.263113]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 9/66] [Batch classify loss: 0.210634]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 10/66] [Batch classify loss: 0.232928]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 11/66] [Batch classify loss: 0.299912]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 12/66] [Batch classify loss: 0.286480]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 13/66] [Batch classify loss: 0.244811]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 14/66] [Batch classify loss: 0.284640]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 15/66] [Batch classify loss: 0.240230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 16/66] [Batch classify loss: 0.310072]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 17/66] [Batch classify loss: 0.317532]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 18/66] [Batch classify loss: 0.224816]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 19/66] [Batch classify loss: 0.360715]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 20/66] [Batch classify loss: 0.293526]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 21/66] [Batch classify loss: 0.231968]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 22/66] [Batch classify loss: 0.352301]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 23/66] [Batch classify loss: 0.354509]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 24/66] [Batch classify loss: 0.346041]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 25/66] [Batch classify loss: 0.326212]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 26/66] [Batch classify loss: 0.369594]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 27/66] [Batch classify loss: 0.377465]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 28/66] [Batch classify loss: 0.383725]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 29/66] [Batch classify loss: 0.370128]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 30/66] [Batch classify loss: 0.359979]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 31/66] [Batch classify loss: 0.343858]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 32/66] [Batch classify loss: 0.324915]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 33/66] [Batch classify loss: 0.394911]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 34/66] [Batch classify loss: 0.376617]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 35/66] [Batch classify loss: 0.352963]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 36/66] [Batch classify loss: 0.409802]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 37/66] [Batch classify loss: 0.395925]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 38/66] [Batch classify loss: 0.388207]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 39/66] [Batch classify loss: 0.377154]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 40/66] [Batch classify loss: 0.336847]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 41/66] [Batch classify loss: 0.493215]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 42/66] [Batch classify loss: 0.428735]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 43/66] [Batch classify loss: 0.381262]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 44/66] [Batch classify loss: 0.394090]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 45/66] [Batch classify loss: 0.391076]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 46/66] [Batch classify loss: 0.433928]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 47/66] [Batch classify loss: 0.425423]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 48/66] [Batch classify loss: 0.407544]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 49/66] [Batch classify loss: 0.414061]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 50/66] [Batch classify loss: 0.398499]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 51/66] [Batch classify loss: 0.416946]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 52/66] [Batch classify loss: 0.506170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 53/66] [Batch classify loss: 0.430483]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 54/66] [Batch classify loss: 0.410464]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 55/66] [Batch classify loss: 0.441486]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 56/66] [Batch classify loss: 0.443919]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 57/66] [Batch classify loss: 0.491148]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 58/66] [Batch classify loss: 0.440239]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 59/66] [Batch classify loss: 0.390591]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 60/66] [Batch classify loss: 0.423660]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 61/66] [Batch classify loss: 0.404464]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 62/66] [Batch classify loss: 0.479676]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 63/66] [Batch classify loss: 0.422430]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 64/66] [Batch classify loss: 0.453796]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 10/50] [Batch 65/66] [Batch classify loss: 0.491738]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 10/50] [Batch 66/66] [Batch classify loss: 0.490568]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(4908)
0010 epoch rmt trained classifier accuary on the clean testing examples:49.0800%
0010 epoch rmt trained classifier loss on the clean testing examples:1.6185
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(331)
0010 epoch rmt trained classifier accuary on adversarial testset:3.3100%
0010 epoch rmt trained classifier loss on adversarial testset:5.176423072814941


10epoch learning rate:0.0001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 1/66] [Batch classify loss: 0.717171]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 2/66] [Batch classify loss: 0.259262]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 3/66] [Batch classify loss: 0.357730]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 4/66] [Batch classify loss: 0.190481]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 5/66] [Batch classify loss: 0.146880]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 6/66] [Batch classify loss: 0.129188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 7/66] [Batch classify loss: 0.106775]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 8/66] [Batch classify loss: 0.141982]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 9/66] [Batch classify loss: 0.152686]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 10/66] [Batch classify loss: 0.148333]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 11/66] [Batch classify loss: 0.161810]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 12/66] [Batch classify loss: 0.201388]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 13/66] [Batch classify loss: 0.198395]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 14/66] [Batch classify loss: 0.181292]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 15/66] [Batch classify loss: 0.186246]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 16/66] [Batch classify loss: 0.174299]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 17/66] [Batch classify loss: 0.221223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 18/66] [Batch classify loss: 0.200310]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 19/66] [Batch classify loss: 0.190517]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 20/66] [Batch classify loss: 0.217450]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 21/66] [Batch classify loss: 0.226219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 22/66] [Batch classify loss: 0.255740]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 23/66] [Batch classify loss: 0.201659]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 24/66] [Batch classify loss: 0.227626]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 25/66] [Batch classify loss: 0.251703]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 26/66] [Batch classify loss: 0.260526]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 27/66] [Batch classify loss: 0.235315]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 28/66] [Batch classify loss: 0.240494]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 29/66] [Batch classify loss: 0.256647]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 30/66] [Batch classify loss: 0.286331]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 31/66] [Batch classify loss: 0.272685]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 32/66] [Batch classify loss: 0.260288]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 33/66] [Batch classify loss: 0.260960]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 34/66] [Batch classify loss: 0.320616]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 35/66] [Batch classify loss: 0.300134]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 36/66] [Batch classify loss: 0.278132]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 37/66] [Batch classify loss: 0.325061]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 38/66] [Batch classify loss: 0.270261]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 39/66] [Batch classify loss: 0.304847]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 40/66] [Batch classify loss: 0.313665]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 41/66] [Batch classify loss: 0.273750]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 42/66] [Batch classify loss: 0.303283]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 43/66] [Batch classify loss: 0.315432]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 44/66] [Batch classify loss: 0.286716]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 45/66] [Batch classify loss: 0.338258]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 46/66] [Batch classify loss: 0.299684]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 47/66] [Batch classify loss: 0.348168]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 48/66] [Batch classify loss: 0.278139]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 49/66] [Batch classify loss: 0.275188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 50/66] [Batch classify loss: 0.311879]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 51/66] [Batch classify loss: 0.293239]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 52/66] [Batch classify loss: 0.316739]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 53/66] [Batch classify loss: 0.346822]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 54/66] [Batch classify loss: 0.332231]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 55/66] [Batch classify loss: 0.331627]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 56/66] [Batch classify loss: 0.302468]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 57/66] [Batch classify loss: 0.345058]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 58/66] [Batch classify loss: 0.327135]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 59/66] [Batch classify loss: 0.359665]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 60/66] [Batch classify loss: 0.338098]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 61/66] [Batch classify loss: 0.355232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 62/66] [Batch classify loss: 0.406021]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 63/66] [Batch classify loss: 0.371689]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 64/66] [Batch classify loss: 0.325886]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 11/50] [Batch 65/66] [Batch classify loss: 0.300727]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 11/50] [Batch 66/66] [Batch classify loss: 0.371247]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(4657)
0011 epoch rmt trained classifier accuary on the clean testing examples:46.5700%
0011 epoch rmt trained classifier loss on the clean testing examples:1.7302
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(346)
0011 epoch rmt trained classifier accuary on adversarial testset:3.4600%
0011 epoch rmt trained classifier loss on adversarial testset:5.280947685241699


11epoch learning rate:0.0001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 1/66] [Batch classify loss: 0.350099]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 2/66] [Batch classify loss: 0.326750]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 3/66] [Batch classify loss: 0.712983]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 4/66] [Batch classify loss: 0.600156]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 5/66] [Batch classify loss: 0.328627]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 6/66] [Batch classify loss: 0.368083]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 7/66] [Batch classify loss: 0.177248]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 8/66] [Batch classify loss: 0.379672]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 9/66] [Batch classify loss: 0.120839]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 10/66] [Batch classify loss: 0.116126]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 11/66] [Batch classify loss: 0.124281]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 12/66] [Batch classify loss: 0.103168]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 13/66] [Batch classify loss: 0.108732]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 14/66] [Batch classify loss: 0.120740]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 15/66] [Batch classify loss: 0.111120]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 16/66] [Batch classify loss: 0.144016]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 17/66] [Batch classify loss: 0.124014]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 18/66] [Batch classify loss: 0.123374]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 19/66] [Batch classify loss: 0.130418]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 20/66] [Batch classify loss: 0.160543]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 21/66] [Batch classify loss: 0.132474]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 22/66] [Batch classify loss: 0.155133]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 23/66] [Batch classify loss: 0.152815]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 24/66] [Batch classify loss: 0.126818]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 25/66] [Batch classify loss: 0.124426]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 26/66] [Batch classify loss: 0.154293]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 27/66] [Batch classify loss: 0.174938]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 28/66] [Batch classify loss: 0.183612]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 29/66] [Batch classify loss: 0.164805]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 30/66] [Batch classify loss: 0.151906]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 31/66] [Batch classify loss: 0.144964]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 32/66] [Batch classify loss: 0.154725]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 33/66] [Batch classify loss: 0.188566]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 34/66] [Batch classify loss: 0.173995]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 35/66] [Batch classify loss: 0.199429]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 36/66] [Batch classify loss: 0.203211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 37/66] [Batch classify loss: 0.180436]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 38/66] [Batch classify loss: 0.232718]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 39/66] [Batch classify loss: 0.201295]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 40/66] [Batch classify loss: 0.225968]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 41/66] [Batch classify loss: 0.178821]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 42/66] [Batch classify loss: 0.220973]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 43/66] [Batch classify loss: 0.217075]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 44/66] [Batch classify loss: 0.207368]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 45/66] [Batch classify loss: 0.208338]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 46/66] [Batch classify loss: 0.228918]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 47/66] [Batch classify loss: 0.265302]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 48/66] [Batch classify loss: 0.246225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 49/66] [Batch classify loss: 0.249204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 50/66] [Batch classify loss: 0.239293]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 51/66] [Batch classify loss: 0.243267]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 52/66] [Batch classify loss: 0.223316]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 53/66] [Batch classify loss: 0.216206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 54/66] [Batch classify loss: 0.229125]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 55/66] [Batch classify loss: 0.259640]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 56/66] [Batch classify loss: 0.250978]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 57/66] [Batch classify loss: 0.206163]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 58/66] [Batch classify loss: 0.251666]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 59/66] [Batch classify loss: 0.244264]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 60/66] [Batch classify loss: 0.248528]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 61/66] [Batch classify loss: 0.254970]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 62/66] [Batch classify loss: 0.286338]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 63/66] [Batch classify loss: 0.258356]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 64/66] [Batch classify loss: 0.264280]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 12/50] [Batch 65/66] [Batch classify loss: 0.254260]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 12/50] [Batch 66/66] [Batch classify loss: 0.283089]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(4438)
0012 epoch rmt trained classifier accuary on the clean testing examples:44.3800%
0012 epoch rmt trained classifier loss on the clean testing examples:1.8202
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(352)
0012 epoch rmt trained classifier accuary on adversarial testset:3.5200%
0012 epoch rmt trained classifier loss on adversarial testset:5.423098087310791


12epoch learning rate:0.0001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 1/66] [Batch classify loss: 0.149939]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 2/66] [Batch classify loss: 0.169244]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 3/66] [Batch classify loss: 1.439705]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 4/66] [Batch classify loss: 0.141545]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 5/66] [Batch classify loss: 0.530982]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 6/66] [Batch classify loss: 0.802098]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 7/66] [Batch classify loss: 0.750790]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 8/66] [Batch classify loss: 0.292114]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 9/66] [Batch classify loss: 0.159585]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 10/66] [Batch classify loss: 0.212324]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 11/66] [Batch classify loss: 0.244668]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 12/66] [Batch classify loss: 0.119962]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 13/66] [Batch classify loss: 0.318024]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 14/66] [Batch classify loss: 0.313636]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 15/66] [Batch classify loss: 0.143064]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 16/66] [Batch classify loss: 0.100474]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 17/66] [Batch classify loss: 0.095302]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 18/66] [Batch classify loss: 0.218989]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 19/66] [Batch classify loss: 0.130050]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 20/66] [Batch classify loss: 0.093631]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 21/66] [Batch classify loss: 0.089251]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 22/66] [Batch classify loss: 0.104270]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 23/66] [Batch classify loss: 0.097778]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 24/66] [Batch classify loss: 0.094683]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 25/66] [Batch classify loss: 0.105911]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 26/66] [Batch classify loss: 0.094038]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 27/66] [Batch classify loss: 0.102151]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 28/66] [Batch classify loss: 0.135749]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 29/66] [Batch classify loss: 0.090403]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 30/66] [Batch classify loss: 0.095629]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 31/66] [Batch classify loss: 0.096946]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 32/66] [Batch classify loss: 0.155850]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 33/66] [Batch classify loss: 0.104225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 34/66] [Batch classify loss: 0.124584]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 35/66] [Batch classify loss: 0.137229]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 36/66] [Batch classify loss: 0.121476]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 37/66] [Batch classify loss: 0.123827]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 38/66] [Batch classify loss: 0.101549]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 39/66] [Batch classify loss: 0.143582]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 40/66] [Batch classify loss: 0.125567]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 41/66] [Batch classify loss: 0.159580]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 42/66] [Batch classify loss: 0.135136]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 43/66] [Batch classify loss: 0.108050]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 44/66] [Batch classify loss: 0.105905]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 45/66] [Batch classify loss: 0.128850]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 46/66] [Batch classify loss: 0.114297]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 47/66] [Batch classify loss: 0.128139]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 48/66] [Batch classify loss: 0.165425]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 49/66] [Batch classify loss: 0.112785]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 50/66] [Batch classify loss: 0.153353]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 51/66] [Batch classify loss: 0.163107]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 52/66] [Batch classify loss: 0.159208]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 53/66] [Batch classify loss: 0.163120]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 54/66] [Batch classify loss: 0.156699]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 55/66] [Batch classify loss: 0.163460]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 56/66] [Batch classify loss: 0.141013]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 57/66] [Batch classify loss: 0.173335]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 58/66] [Batch classify loss: 0.165425]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 59/66] [Batch classify loss: 0.159212]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 60/66] [Batch classify loss: 0.178188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 61/66] [Batch classify loss: 0.194727]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 62/66] [Batch classify loss: 0.158521]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 63/66] [Batch classify loss: 0.207086]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 64/66] [Batch classify loss: 0.148518]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 13/50] [Batch 65/66] [Batch classify loss: 0.169550]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 13/50] [Batch 66/66] [Batch classify loss: 0.193379]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(3941)
0013 epoch rmt trained classifier accuary on the clean testing examples:39.4100%
0013 epoch rmt trained classifier loss on the clean testing examples:2.0332
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(283)
0013 epoch rmt trained classifier accuary on adversarial testset:2.8300%
0013 epoch rmt trained classifier loss on adversarial testset:5.959960460662842


13epoch learning rate:0.0001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 1/66] [Batch classify loss: 0.091457]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 2/66] [Batch classify loss: 0.054433]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 3/66] [Batch classify loss: 0.065757]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 4/66] [Batch classify loss: 0.065454]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 5/66] [Batch classify loss: 0.857114]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 6/66] [Batch classify loss: 0.046299]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 7/66] [Batch classify loss: 0.706568]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 8/66] [Batch classify loss: 0.837617]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 9/66] [Batch classify loss: 0.502666]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 10/66] [Batch classify loss: 0.236528]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 11/66] [Batch classify loss: 0.589590]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 12/66] [Batch classify loss: 0.781674]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 13/66] [Batch classify loss: 0.281894]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 14/66] [Batch classify loss: 0.845641]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 15/66] [Batch classify loss: 0.462209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 16/66] [Batch classify loss: 0.233285]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 17/66] [Batch classify loss: 0.586556]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 18/66] [Batch classify loss: 0.269103]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 19/66] [Batch classify loss: 0.187322]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 20/66] [Batch classify loss: 0.238470]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 21/66] [Batch classify loss: 0.265405]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 22/66] [Batch classify loss: 0.151656]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 23/66] [Batch classify loss: 0.125466]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 24/66] [Batch classify loss: 0.187672]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 25/66] [Batch classify loss: 0.088375]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 26/66] [Batch classify loss: 0.138718]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 27/66] [Batch classify loss: 0.123069]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 28/66] [Batch classify loss: 0.086182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 29/66] [Batch classify loss: 0.077284]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 30/66] [Batch classify loss: 0.114404]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 31/66] [Batch classify loss: 0.379634]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 32/66] [Batch classify loss: 0.122113]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 33/66] [Batch classify loss: 0.089765]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 34/66] [Batch classify loss: 0.091603]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 35/66] [Batch classify loss: 0.106993]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 36/66] [Batch classify loss: 0.087586]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 37/66] [Batch classify loss: 0.084986]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 38/66] [Batch classify loss: 0.080785]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 39/66] [Batch classify loss: 0.096945]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 40/66] [Batch classify loss: 0.094384]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 41/66] [Batch classify loss: 0.090563]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 42/66] [Batch classify loss: 0.118439]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 43/66] [Batch classify loss: 0.083925]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 44/66] [Batch classify loss: 0.078583]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 45/66] [Batch classify loss: 0.077180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 46/66] [Batch classify loss: 0.083524]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 47/66] [Batch classify loss: 0.101668]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 48/66] [Batch classify loss: 0.096412]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 49/66] [Batch classify loss: 0.088170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 50/66] [Batch classify loss: 0.119875]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 51/66] [Batch classify loss: 0.078968]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 52/66] [Batch classify loss: 0.109949]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 53/66] [Batch classify loss: 0.093213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 54/66] [Batch classify loss: 0.099424]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 55/66] [Batch classify loss: 0.138013]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 56/66] [Batch classify loss: 0.076774]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 57/66] [Batch classify loss: 0.094969]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 58/66] [Batch classify loss: 0.112976]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 59/66] [Batch classify loss: 0.104420]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 60/66] [Batch classify loss: 0.103536]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 61/66] [Batch classify loss: 0.137169]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 62/66] [Batch classify loss: 0.120410]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 63/66] [Batch classify loss: 0.128240]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 64/66] [Batch classify loss: 0.157558]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 14/50] [Batch 65/66] [Batch classify loss: 0.121074]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 14/50] [Batch 66/66] [Batch classify loss: 0.115242]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(3490)
0014 epoch rmt trained classifier accuary on the clean testing examples:34.9000%
0014 epoch rmt trained classifier loss on the clean testing examples:2.4171
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(276)
0014 epoch rmt trained classifier accuary on adversarial testset:2.7600%
0014 epoch rmt trained classifier loss on adversarial testset:6.883341312408447


14epoch learning rate:0.0001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 1/66] [Batch classify loss: 0.045417]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 2/66] [Batch classify loss: 0.024194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 3/66] [Batch classify loss: 0.031542]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 4/66] [Batch classify loss: 0.023270]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 5/66] [Batch classify loss: 1.179222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 6/66] [Batch classify loss: 0.025125]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 7/66] [Batch classify loss: 1.172071]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 8/66] [Batch classify loss: 1.224833]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 9/66] [Batch classify loss: 0.371515]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 10/66] [Batch classify loss: 1.173531]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 11/66] [Batch classify loss: 0.446453]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 12/66] [Batch classify loss: 1.156942]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 13/66] [Batch classify loss: 0.017330]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 14/66] [Batch classify loss: 0.238034]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 15/66] [Batch classify loss: 0.597130]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 16/66] [Batch classify loss: 0.020373]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 17/66] [Batch classify loss: 0.816728]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 18/66] [Batch classify loss: 0.422698]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 19/66] [Batch classify loss: 0.810066]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 20/66] [Batch classify loss: 0.438109]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 21/66] [Batch classify loss: 0.584621]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 22/66] [Batch classify loss: 0.266427]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 23/66] [Batch classify loss: 0.586852]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 24/66] [Batch classify loss: 0.397985]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 25/66] [Batch classify loss: 0.300182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 26/66] [Batch classify loss: 0.230095]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 27/66] [Batch classify loss: 0.114509]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 28/66] [Batch classify loss: 0.203926]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 29/66] [Batch classify loss: 0.089188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 30/66] [Batch classify loss: 0.163357]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 31/66] [Batch classify loss: 0.147540]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 32/66] [Batch classify loss: 0.106662]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 33/66] [Batch classify loss: 0.147219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 34/66] [Batch classify loss: 0.121232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 35/66] [Batch classify loss: 0.268154]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 36/66] [Batch classify loss: 0.076028]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 37/66] [Batch classify loss: 0.123999]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 38/66] [Batch classify loss: 0.290674]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 39/66] [Batch classify loss: 0.074981]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 40/66] [Batch classify loss: 0.136134]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 41/66] [Batch classify loss: 0.207900]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 42/66] [Batch classify loss: 0.098408]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 43/66] [Batch classify loss: 0.077064]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 44/66] [Batch classify loss: 0.153489]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 45/66] [Batch classify loss: 0.181048]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 46/66] [Batch classify loss: 0.096900]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 47/66] [Batch classify loss: 0.075686]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 48/66] [Batch classify loss: 0.086271]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 49/66] [Batch classify loss: 0.076484]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 50/66] [Batch classify loss: 0.174640]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 51/66] [Batch classify loss: 0.118560]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 52/66] [Batch classify loss: 0.141112]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 53/66] [Batch classify loss: 0.207539]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 54/66] [Batch classify loss: 0.071279]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 55/66] [Batch classify loss: 0.099750]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 56/66] [Batch classify loss: 0.089589]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 57/66] [Batch classify loss: 0.142351]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 58/66] [Batch classify loss: 0.081537]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 59/66] [Batch classify loss: 0.072224]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 60/66] [Batch classify loss: 0.092241]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 61/66] [Batch classify loss: 0.077322]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 62/66] [Batch classify loss: 0.065608]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 63/66] [Batch classify loss: 0.070776]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 64/66] [Batch classify loss: 0.098497]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 15/50] [Batch 65/66] [Batch classify loss: 0.066389]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 15/50] [Batch 66/66] [Batch classify loss: 0.095798]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(3161)
0015 epoch rmt trained classifier accuary on the clean testing examples:31.6100%
0015 epoch rmt trained classifier loss on the clean testing examples:2.8931
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(278)
0015 epoch rmt trained classifier accuary on adversarial testset:2.7800%
0015 epoch rmt trained classifier loss on adversarial testset:7.939000129699707


15epoch learning rate:0.0001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 1/66] [Batch classify loss: 0.011291]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 2/66] [Batch classify loss: 0.010861]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 3/66] [Batch classify loss: 0.008683]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 4/66] [Batch classify loss: 0.009568]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 5/66] [Batch classify loss: 0.010089]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 6/66] [Batch classify loss: 0.006818]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 7/66] [Batch classify loss: 0.007254]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 8/66] [Batch classify loss: 0.008616]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 9/66] [Batch classify loss: 0.008102]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 10/66] [Batch classify loss: 0.007505]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 11/66] [Batch classify loss: 0.972175]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 12/66] [Batch classify loss: 0.983332]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 13/66] [Batch classify loss: 0.007046]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 14/66] [Batch classify loss: 1.046591]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 15/66] [Batch classify loss: 0.007522]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 16/66] [Batch classify loss: 0.647347]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 17/66] [Batch classify loss: 0.435571]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 18/66] [Batch classify loss: 1.023100]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 19/66] [Batch classify loss: 1.078043]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 20/66] [Batch classify loss: 0.949438]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 21/66] [Batch classify loss: 0.942997]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 22/66] [Batch classify loss: 0.204874]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 23/66] [Batch classify loss: 0.931517]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 24/66] [Batch classify loss: 0.617351]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 25/66] [Batch classify loss: 0.654066]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 26/66] [Batch classify loss: 0.914098]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 27/66] [Batch classify loss: 0.982217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 28/66] [Batch classify loss: 0.409422]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 29/66] [Batch classify loss: 0.897659]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 30/66] [Batch classify loss: 0.587498]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 31/66] [Batch classify loss: 0.112748]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 32/66] [Batch classify loss: 0.587886]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 33/66] [Batch classify loss: 0.872403]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 34/66] [Batch classify loss: 0.318421]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 35/66] [Batch classify loss: 0.127734]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 36/66] [Batch classify loss: 0.006620]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 37/66] [Batch classify loss: 0.258320]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 38/66] [Batch classify loss: 0.244659]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 39/66] [Batch classify loss: 0.122828]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 40/66] [Batch classify loss: 0.580007]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 41/66] [Batch classify loss: 0.237784]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 42/66] [Batch classify loss: 0.240170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 43/66] [Batch classify loss: 0.063119]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 44/66] [Batch classify loss: 0.359620]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 45/66] [Batch classify loss: 0.135385]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 46/66] [Batch classify loss: 0.114768]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 47/66] [Batch classify loss: 0.078028]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 48/66] [Batch classify loss: 0.080115]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 49/66] [Batch classify loss: 0.810092]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 50/66] [Batch classify loss: 0.237218]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 51/66] [Batch classify loss: 0.099022]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 52/66] [Batch classify loss: 0.096688]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 53/66] [Batch classify loss: 0.157802]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 54/66] [Batch classify loss: 0.153143]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 55/66] [Batch classify loss: 0.112153]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 56/66] [Batch classify loss: 0.109176]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 57/66] [Batch classify loss: 0.077497]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 58/66] [Batch classify loss: 0.106408]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 59/66] [Batch classify loss: 0.146830]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 60/66] [Batch classify loss: 0.063527]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 61/66] [Batch classify loss: 0.087051]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 62/66] [Batch classify loss: 0.390801]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 63/66] [Batch classify loss: 0.077371]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 64/66] [Batch classify loss: 0.104197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 16/50] [Batch 65/66] [Batch classify loss: 0.144922]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 16/50] [Batch 66/66] [Batch classify loss: 0.062855]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(2948)
0016 epoch rmt trained classifier accuary on the clean testing examples:29.4800%
0016 epoch rmt trained classifier loss on the clean testing examples:3.6710
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(259)
0016 epoch rmt trained classifier accuary on adversarial testset:2.5900%
0016 epoch rmt trained classifier loss on adversarial testset:10.523214340209961


16epoch learning rate:0.0001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 1/66] [Batch classify loss: 0.003438]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 2/66] [Batch classify loss: 0.003371]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 3/66] [Batch classify loss: 0.002882]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 4/66] [Batch classify loss: 0.004388]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 5/66] [Batch classify loss: 0.003249]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 6/66] [Batch classify loss: 0.003549]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 7/66] [Batch classify loss: 0.003649]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 8/66] [Batch classify loss: 0.002693]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 9/66] [Batch classify loss: 0.003071]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 10/66] [Batch classify loss: 0.003598]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 11/66] [Batch classify loss: 0.003676]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 12/66] [Batch classify loss: 0.003265]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 13/66] [Batch classify loss: 0.003342]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 14/66] [Batch classify loss: 0.002953]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 15/66] [Batch classify loss: 0.002949]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 16/66] [Batch classify loss: 0.002865]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 17/66] [Batch classify loss: 0.002067]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 18/66] [Batch classify loss: 0.002087]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 19/66] [Batch classify loss: 0.002297]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 20/66] [Batch classify loss: 0.002134]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 21/66] [Batch classify loss: 0.748145]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 22/66] [Batch classify loss: 0.750000]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 23/66] [Batch classify loss: 0.002005]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 24/66] [Batch classify loss: 0.456628]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 25/66] [Batch classify loss: 0.286581]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 26/66] [Batch classify loss: 0.187800]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 27/66] [Batch classify loss: 0.738584]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 28/66] [Batch classify loss: 0.002614]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 29/66] [Batch classify loss: 0.451134]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 30/66] [Batch classify loss: 0.002199]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 31/66] [Batch classify loss: 0.725608]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 32/66] [Batch classify loss: 0.721110]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 33/66] [Batch classify loss: 0.001560]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 34/66] [Batch classify loss: 0.444571]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 35/66] [Batch classify loss: 0.462197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 36/66] [Batch classify loss: 0.715554]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 37/66] [Batch classify loss: 0.713757]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 38/66] [Batch classify loss: 0.423435]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 39/66] [Batch classify loss: 0.001879]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 40/66] [Batch classify loss: 0.739289]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 41/66] [Batch classify loss: 0.694407]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 42/66] [Batch classify loss: 0.419081]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 43/66] [Batch classify loss: 0.425317]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 44/66] [Batch classify loss: 0.691764]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 45/66] [Batch classify loss: 0.411181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 46/66] [Batch classify loss: 0.254348]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 47/66] [Batch classify loss: 0.164790]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 48/66] [Batch classify loss: 0.161695]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 49/66] [Batch classify loss: 0.160265]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 50/66] [Batch classify loss: 0.395125]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 51/66] [Batch classify loss: 0.642715]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 52/66] [Batch classify loss: 0.385805]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 53/66] [Batch classify loss: 0.488371]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 54/66] [Batch classify loss: 0.242205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 55/66] [Batch classify loss: 0.451243]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 56/66] [Batch classify loss: 0.002839]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 57/66] [Batch classify loss: 0.363385]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 58/66] [Batch classify loss: 0.110456]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 59/66] [Batch classify loss: 0.001728]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 60/66] [Batch classify loss: 0.068544]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 61/66] [Batch classify loss: 0.147110]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 62/66] [Batch classify loss: 0.221769]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 63/66] [Batch classify loss: 0.093397]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 64/66] [Batch classify loss: 0.210048]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 17/50] [Batch 65/66] [Batch classify loss: 0.099187]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 17/50] [Batch 66/66] [Batch classify loss: 0.452313]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(2397)
0017 epoch rmt trained classifier accuary on the clean testing examples:23.9700%
0017 epoch rmt trained classifier loss on the clean testing examples:5.8008
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(207)
0017 epoch rmt trained classifier accuary on adversarial testset:2.0700%
0017 epoch rmt trained classifier loss on adversarial testset:15.359227180480957


17epoch learning rate:0.0001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 1/66] [Batch classify loss: 0.001934]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 2/66] [Batch classify loss: 0.001550]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 3/66] [Batch classify loss: 0.001394]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 4/66] [Batch classify loss: 0.001226]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 5/66] [Batch classify loss: 0.001534]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 6/66] [Batch classify loss: 0.001510]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 7/66] [Batch classify loss: 0.001547]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 8/66] [Batch classify loss: 0.001321]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 9/66] [Batch classify loss: 0.001251]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 10/66] [Batch classify loss: 0.001476]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 11/66] [Batch classify loss: 0.001214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 12/66] [Batch classify loss: 0.001092]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 13/66] [Batch classify loss: 0.001176]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 14/66] [Batch classify loss: 0.001082]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 15/66] [Batch classify loss: 0.001253]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 16/66] [Batch classify loss: 0.001258]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 17/66] [Batch classify loss: 0.001215]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 18/66] [Batch classify loss: 0.001234]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 19/66] [Batch classify loss: 0.001013]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 20/66] [Batch classify loss: 0.001217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 21/66] [Batch classify loss: 0.001223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 22/66] [Batch classify loss: 0.565853]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 23/66] [Batch classify loss: 0.000898]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 24/66] [Batch classify loss: 0.000958]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 25/66] [Batch classify loss: 0.528102]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 26/66] [Batch classify loss: 0.001184]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 27/66] [Batch classify loss: 0.001185]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 28/66] [Batch classify loss: 0.001316]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 29/66] [Batch classify loss: 0.001017]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 30/66] [Batch classify loss: 0.000920]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 31/66] [Batch classify loss: 0.546419]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 32/66] [Batch classify loss: 0.000782]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 33/66] [Batch classify loss: 0.556750]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 34/66] [Batch classify loss: 0.528507]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 35/66] [Batch classify loss: 0.542328]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 36/66] [Batch classify loss: 0.000880]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 37/66] [Batch classify loss: 0.510098]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 38/66] [Batch classify loss: 0.317883]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 39/66] [Batch classify loss: 0.000972]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 40/66] [Batch classify loss: 0.492319]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 41/66] [Batch classify loss: 0.000863]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 42/66] [Batch classify loss: 0.000948]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 43/66] [Batch classify loss: 0.316334]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 44/66] [Batch classify loss: 0.186125]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 45/66] [Batch classify loss: 0.495999]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 46/66] [Batch classify loss: 0.000752]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 47/66] [Batch classify loss: 0.504659]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 48/66] [Batch classify loss: 0.000651]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 49/66] [Batch classify loss: 0.000910]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 50/66] [Batch classify loss: 0.290149]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 51/66] [Batch classify loss: 0.470285]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 52/66] [Batch classify loss: 0.457749]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 53/66] [Batch classify loss: 0.000731]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 54/66] [Batch classify loss: 0.288734]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 55/66] [Batch classify loss: 0.437816]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 56/66] [Batch classify loss: 0.081513]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 57/66] [Batch classify loss: 0.001050]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 58/66] [Batch classify loss: 0.423371]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 59/66] [Batch classify loss: 0.001065]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 60/66] [Batch classify loss: 0.000793]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 61/66] [Batch classify loss: 0.273530]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 62/66] [Batch classify loss: 0.277366]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 63/66] [Batch classify loss: 0.000825]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 64/66] [Batch classify loss: 0.159971]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 18/50] [Batch 65/66] [Batch classify loss: 0.432836]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 18/50] [Batch 66/66] [Batch classify loss: 0.334601]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1985)
0018 epoch rmt trained classifier accuary on the clean testing examples:19.8500%
0018 epoch rmt trained classifier loss on the clean testing examples:10.6119
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(252)
0018 epoch rmt trained classifier accuary on adversarial testset:2.5200%
0018 epoch rmt trained classifier loss on adversarial testset:25.627460479736328


18epoch learning rate:0.0001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 1/66] [Batch classify loss: 0.000971]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 2/66] [Batch classify loss: 0.000922]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 3/66] [Batch classify loss: 0.000979]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 4/66] [Batch classify loss: 0.001067]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 5/66] [Batch classify loss: 0.000826]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 6/66] [Batch classify loss: 0.000909]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 7/66] [Batch classify loss: 0.001388]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 8/66] [Batch classify loss: 0.000829]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 9/66] [Batch classify loss: 0.000832]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 10/66] [Batch classify loss: 0.000830]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 11/66] [Batch classify loss: 0.000796]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 12/66] [Batch classify loss: 0.001031]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 13/66] [Batch classify loss: 0.000742]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 14/66] [Batch classify loss: 0.000764]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 15/66] [Batch classify loss: 0.000862]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 16/66] [Batch classify loss: 0.000835]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 17/66] [Batch classify loss: 0.000733]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 18/66] [Batch classify loss: 0.000587]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 19/66] [Batch classify loss: 0.000751]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 20/66] [Batch classify loss: 0.000583]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 21/66] [Batch classify loss: 0.000709]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 22/66] [Batch classify loss: 0.000679]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 23/66] [Batch classify loss: 0.000856]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 24/66] [Batch classify loss: 0.398475]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 25/66] [Batch classify loss: 0.000595]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 26/66] [Batch classify loss: 0.000664]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 27/66] [Batch classify loss: 0.000625]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 28/66] [Batch classify loss: 0.000607]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 29/66] [Batch classify loss: 0.000510]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 30/66] [Batch classify loss: 0.000763]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 31/66] [Batch classify loss: 0.000637]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 32/66] [Batch classify loss: 0.000752]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 33/66] [Batch classify loss: 0.000475]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 34/66] [Batch classify loss: 0.000556]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 35/66] [Batch classify loss: 0.000427]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 36/66] [Batch classify loss: 0.000482]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 37/66] [Batch classify loss: 0.389072]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 38/66] [Batch classify loss: 0.000628]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 39/66] [Batch classify loss: 0.000722]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 40/66] [Batch classify loss: 0.000634]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 41/66] [Batch classify loss: 0.000789]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 42/66] [Batch classify loss: 0.000529]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 43/66] [Batch classify loss: 0.000603]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 44/66] [Batch classify loss: 0.000643]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 45/66] [Batch classify loss: 0.247465]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 46/66] [Batch classify loss: 0.366429]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 47/66] [Batch classify loss: 0.374602]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 48/66] [Batch classify loss: 0.000388]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 49/66] [Batch classify loss: 0.000501]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 50/66] [Batch classify loss: 0.212494]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 51/66] [Batch classify loss: 0.000562]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 52/66] [Batch classify loss: 0.388681]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 53/66] [Batch classify loss: 0.000523]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 54/66] [Batch classify loss: 0.000617]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 55/66] [Batch classify loss: 0.000518]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 56/66] [Batch classify loss: 0.352228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 57/66] [Batch classify loss: 0.000372]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 58/66] [Batch classify loss: 0.341595]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 59/66] [Batch classify loss: 0.000386]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 60/66] [Batch classify loss: 0.344707]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 61/66] [Batch classify loss: 0.195009]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 62/66] [Batch classify loss: 0.000535]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 63/66] [Batch classify loss: 0.214180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 64/66] [Batch classify loss: 0.000516]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 19/50] [Batch 65/66] [Batch classify loss: 0.000503]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 19/50] [Batch 66/66] [Batch classify loss: 0.000617]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1492)
0019 epoch rmt trained classifier accuary on the clean testing examples:14.9200%
0019 epoch rmt trained classifier loss on the clean testing examples:22.9999
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(524)
0019 epoch rmt trained classifier accuary on adversarial testset:5.2400%
0019 epoch rmt trained classifier loss on adversarial testset:46.23810958862305


19epoch learning rate:0.0001
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 1/66] [Batch classify loss: 0.000663]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 2/66] [Batch classify loss: 0.000545]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 3/66] [Batch classify loss: 0.000603]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 4/66] [Batch classify loss: 0.000497]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 5/66] [Batch classify loss: 0.000475]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 6/66] [Batch classify loss: 0.000501]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 7/66] [Batch classify loss: 0.000627]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 8/66] [Batch classify loss: 0.000536]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 9/66] [Batch classify loss: 0.000661]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 10/66] [Batch classify loss: 0.000605]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 11/66] [Batch classify loss: 0.000671]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 12/66] [Batch classify loss: 0.000448]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 13/66] [Batch classify loss: 0.000431]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 14/66] [Batch classify loss: 0.000524]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 15/66] [Batch classify loss: 0.000439]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 16/66] [Batch classify loss: 0.000546]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 17/66] [Batch classify loss: 0.000462]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 18/66] [Batch classify loss: 0.000531]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 19/66] [Batch classify loss: 0.000393]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 20/66] [Batch classify loss: 0.000419]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 21/66] [Batch classify loss: 0.000427]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 22/66] [Batch classify loss: 0.000417]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 23/66] [Batch classify loss: 0.000439]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 24/66] [Batch classify loss: 0.000432]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 25/66] [Batch classify loss: 0.000356]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 26/66] [Batch classify loss: 0.000324]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 27/66] [Batch classify loss: 0.000343]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 28/66] [Batch classify loss: 0.000479]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 29/66] [Batch classify loss: 0.000449]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 30/66] [Batch classify loss: 0.000402]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 31/66] [Batch classify loss: 0.000382]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 32/66] [Batch classify loss: 0.328896]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 33/66] [Batch classify loss: 0.000420]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 34/66] [Batch classify loss: 0.000326]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 35/66] [Batch classify loss: 0.000338]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 36/66] [Batch classify loss: 0.000316]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 37/66] [Batch classify loss: 0.000313]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 38/66] [Batch classify loss: 0.000435]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 39/66] [Batch classify loss: 0.000352]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 40/66] [Batch classify loss: 0.000321]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 41/66] [Batch classify loss: 0.000284]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 42/66] [Batch classify loss: 0.000442]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 43/66] [Batch classify loss: 0.000384]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 44/66] [Batch classify loss: 0.000375]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 45/66] [Batch classify loss: 0.000284]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 46/66] [Batch classify loss: 0.328347]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 47/66] [Batch classify loss: 0.000290]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 48/66] [Batch classify loss: 0.000255]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 49/66] [Batch classify loss: 0.319001]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 50/66] [Batch classify loss: 0.000288]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 51/66] [Batch classify loss: 0.000244]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 52/66] [Batch classify loss: 0.294378]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 53/66] [Batch classify loss: 0.000284]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 54/66] [Batch classify loss: 0.000419]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 55/66] [Batch classify loss: 0.000231]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 56/66] [Batch classify loss: 0.000280]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 57/66] [Batch classify loss: 0.000392]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 58/66] [Batch classify loss: 0.288669]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 59/66] [Batch classify loss: 0.285574]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 60/66] [Batch classify loss: 0.000317]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 61/66] [Batch classify loss: 0.000315]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 62/66] [Batch classify loss: 0.000398]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 63/66] [Batch classify loss: 0.000369]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 64/66] [Batch classify loss: 0.181782]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 20/50] [Batch 65/66] [Batch classify loss: 0.000413]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 20/50] [Batch 66/66] [Batch classify loss: 0.000456]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1542)
0020 epoch rmt trained classifier accuary on the clean testing examples:15.4200%
0020 epoch rmt trained classifier loss on the clean testing examples:30.0302
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(630)
0020 epoch rmt trained classifier accuary on adversarial testset:6.3000%
0020 epoch rmt trained classifier loss on adversarial testset:61.84316635131836


20epoch learning rate:1.0000000000000003e-05
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 1/66] [Batch classify loss: 0.000302]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 2/66] [Batch classify loss: 0.000440]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 3/66] [Batch classify loss: 0.000390]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 4/66] [Batch classify loss: 0.000495]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 5/66] [Batch classify loss: 0.000421]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 6/66] [Batch classify loss: 0.000473]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 7/66] [Batch classify loss: 0.000386]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 8/66] [Batch classify loss: 0.000386]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 9/66] [Batch classify loss: 0.000395]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 10/66] [Batch classify loss: 0.000407]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 11/66] [Batch classify loss: 0.000335]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 12/66] [Batch classify loss: 0.000315]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 13/66] [Batch classify loss: 0.000391]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 14/66] [Batch classify loss: 0.000455]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 15/66] [Batch classify loss: 0.000394]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 16/66] [Batch classify loss: 0.000436]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 17/66] [Batch classify loss: 0.000350]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 18/66] [Batch classify loss: 0.000531]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 19/66] [Batch classify loss: 0.000405]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 20/66] [Batch classify loss: 0.000391]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 21/66] [Batch classify loss: 0.000318]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 22/66] [Batch classify loss: 0.000397]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 23/66] [Batch classify loss: 0.000250]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 24/66] [Batch classify loss: 0.000465]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 25/66] [Batch classify loss: 0.000278]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 26/66] [Batch classify loss: 0.000483]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 27/66] [Batch classify loss: 0.000436]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 28/66] [Batch classify loss: 0.000373]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 29/66] [Batch classify loss: 0.000355]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 30/66] [Batch classify loss: 0.000309]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 31/66] [Batch classify loss: 0.000384]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 32/66] [Batch classify loss: 0.000376]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 33/66] [Batch classify loss: 0.000510]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 34/66] [Batch classify loss: 0.000353]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 35/66] [Batch classify loss: 0.000290]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 36/66] [Batch classify loss: 0.000318]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 37/66] [Batch classify loss: 0.000325]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 38/66] [Batch classify loss: 0.000375]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 39/66] [Batch classify loss: 0.000359]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 40/66] [Batch classify loss: 0.000455]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 41/66] [Batch classify loss: 0.000365]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 42/66] [Batch classify loss: 0.000345]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 43/66] [Batch classify loss: 0.000311]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 44/66] [Batch classify loss: 0.000377]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 45/66] [Batch classify loss: 0.000352]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 46/66] [Batch classify loss: 0.000319]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 47/66] [Batch classify loss: 0.000263]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 48/66] [Batch classify loss: 0.000391]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 49/66] [Batch classify loss: 0.000371]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 50/66] [Batch classify loss: 0.000275]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 51/66] [Batch classify loss: 0.000448]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 52/66] [Batch classify loss: 0.000394]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 53/66] [Batch classify loss: 0.000343]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 54/66] [Batch classify loss: 0.000347]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 55/66] [Batch classify loss: 0.000331]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 56/66] [Batch classify loss: 0.000266]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 57/66] [Batch classify loss: 0.000501]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 58/66] [Batch classify loss: 0.000304]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 59/66] [Batch classify loss: 0.000327]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 60/66] [Batch classify loss: 0.000328]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 61/66] [Batch classify loss: 0.000287]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 62/66] [Batch classify loss: 0.000294]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 63/66] [Batch classify loss: 0.000341]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 64/66] [Batch classify loss: 0.270741]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 21/50] [Batch 65/66] [Batch classify loss: 0.000334]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 21/50] [Batch 66/66] [Batch classify loss: 0.000334]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1433)
0021 epoch rmt trained classifier accuary on the clean testing examples:14.3300%
0021 epoch rmt trained classifier loss on the clean testing examples:72.4806
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(821)
0021 epoch rmt trained classifier accuary on adversarial testset:8.2100%
0021 epoch rmt trained classifier loss on adversarial testset:137.91848754882812


21epoch learning rate:1.0000000000000003e-05
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 1/66] [Batch classify loss: 0.000366]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 2/66] [Batch classify loss: 0.000330]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 3/66] [Batch classify loss: 0.000437]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 4/66] [Batch classify loss: 0.000284]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 5/66] [Batch classify loss: 0.000331]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 6/66] [Batch classify loss: 0.000394]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 7/66] [Batch classify loss: 0.000287]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 8/66] [Batch classify loss: 0.000372]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 9/66] [Batch classify loss: 0.000439]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 10/66] [Batch classify loss: 0.000311]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 11/66] [Batch classify loss: 0.000461]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 12/66] [Batch classify loss: 0.000328]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 13/66] [Batch classify loss: 0.000307]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 14/66] [Batch classify loss: 0.000292]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 15/66] [Batch classify loss: 0.000493]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 16/66] [Batch classify loss: 0.000370]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 17/66] [Batch classify loss: 0.000307]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 18/66] [Batch classify loss: 0.000351]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 19/66] [Batch classify loss: 0.000320]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 20/66] [Batch classify loss: 0.000424]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 21/66] [Batch classify loss: 0.000398]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 22/66] [Batch classify loss: 0.000357]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 23/66] [Batch classify loss: 0.000262]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 24/66] [Batch classify loss: 0.000308]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 25/66] [Batch classify loss: 0.000258]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 26/66] [Batch classify loss: 0.000389]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 27/66] [Batch classify loss: 0.000275]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 28/66] [Batch classify loss: 0.000261]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 29/66] [Batch classify loss: 0.000267]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 30/66] [Batch classify loss: 0.000334]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 31/66] [Batch classify loss: 0.000381]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 32/66] [Batch classify loss: 0.000286]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 33/66] [Batch classify loss: 0.000370]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 34/66] [Batch classify loss: 0.000292]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 35/66] [Batch classify loss: 0.000263]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 36/66] [Batch classify loss: 0.000345]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 37/66] [Batch classify loss: 0.000294]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 38/66] [Batch classify loss: 0.000292]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 39/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 40/66] [Batch classify loss: 0.000290]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 41/66] [Batch classify loss: 0.000370]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 42/66] [Batch classify loss: 0.000324]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 43/66] [Batch classify loss: 0.000270]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 44/66] [Batch classify loss: 0.000350]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 45/66] [Batch classify loss: 0.000279]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 46/66] [Batch classify loss: 0.000303]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 47/66] [Batch classify loss: 0.000242]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 48/66] [Batch classify loss: 0.000245]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 49/66] [Batch classify loss: 0.000286]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 50/66] [Batch classify loss: 0.000275]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 51/66] [Batch classify loss: 0.000307]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 52/66] [Batch classify loss: 0.000431]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 53/66] [Batch classify loss: 0.000362]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 54/66] [Batch classify loss: 0.000265]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 55/66] [Batch classify loss: 0.000289]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 56/66] [Batch classify loss: 0.000300]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 57/66] [Batch classify loss: 0.000352]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 58/66] [Batch classify loss: 0.000331]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 59/66] [Batch classify loss: 0.000258]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 60/66] [Batch classify loss: 0.000292]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 61/66] [Batch classify loss: 0.000259]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 62/66] [Batch classify loss: 0.000203]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 63/66] [Batch classify loss: 0.000369]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 64/66] [Batch classify loss: 0.000351]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 22/50] [Batch 65/66] [Batch classify loss: 0.000544]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 22/50] [Batch 66/66] [Batch classify loss: 0.000315]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0022 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0022 epoch rmt trained classifier loss on the clean testing examples:1050.9574
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0022 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0022 epoch rmt trained classifier loss on adversarial testset:1724.728759765625


22epoch learning rate:1.0000000000000003e-05
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 1/66] [Batch classify loss: 0.000329]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 2/66] [Batch classify loss: 0.000229]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 3/66] [Batch classify loss: 0.000398]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 4/66] [Batch classify loss: 0.000353]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 5/66] [Batch classify loss: 0.000326]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 6/66] [Batch classify loss: 0.000253]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 7/66] [Batch classify loss: 0.000272]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 8/66] [Batch classify loss: 0.000357]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 9/66] [Batch classify loss: 0.000271]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 10/66] [Batch classify loss: 0.000253]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 11/66] [Batch classify loss: 0.000260]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 12/66] [Batch classify loss: 0.000361]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 13/66] [Batch classify loss: 0.000273]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 14/66] [Batch classify loss: 0.000300]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 15/66] [Batch classify loss: 0.000433]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 16/66] [Batch classify loss: 0.000297]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 17/66] [Batch classify loss: 0.000286]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 18/66] [Batch classify loss: 0.000281]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 19/66] [Batch classify loss: 0.000279]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 20/66] [Batch classify loss: 0.000319]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 21/66] [Batch classify loss: 0.000324]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 22/66] [Batch classify loss: 0.000281]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 23/66] [Batch classify loss: 0.000279]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 24/66] [Batch classify loss: 0.000334]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 25/66] [Batch classify loss: 0.000278]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 26/66] [Batch classify loss: 0.000251]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 27/66] [Batch classify loss: 0.000383]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 28/66] [Batch classify loss: 0.000319]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 29/66] [Batch classify loss: 0.000300]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 30/66] [Batch classify loss: 0.000270]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 31/66] [Batch classify loss: 0.000227]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 32/66] [Batch classify loss: 0.000304]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 33/66] [Batch classify loss: 0.000334]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 34/66] [Batch classify loss: 0.000231]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 35/66] [Batch classify loss: 0.000395]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 36/66] [Batch classify loss: 0.000235]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 37/66] [Batch classify loss: 0.000485]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 38/66] [Batch classify loss: 0.000323]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 39/66] [Batch classify loss: 0.000396]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 40/66] [Batch classify loss: 0.000247]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 41/66] [Batch classify loss: 0.000319]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 42/66] [Batch classify loss: 0.000310]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 43/66] [Batch classify loss: 0.000242]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 44/66] [Batch classify loss: 0.000310]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 45/66] [Batch classify loss: 0.000310]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 46/66] [Batch classify loss: 0.000313]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 47/66] [Batch classify loss: 0.000273]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 48/66] [Batch classify loss: 0.000301]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 49/66] [Batch classify loss: 0.000230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 50/66] [Batch classify loss: 0.000283]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 51/66] [Batch classify loss: 0.000270]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 52/66] [Batch classify loss: 0.000286]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 53/66] [Batch classify loss: 0.000321]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 54/66] [Batch classify loss: 0.000272]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 55/66] [Batch classify loss: 0.000229]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 56/66] [Batch classify loss: 0.000395]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 57/66] [Batch classify loss: 0.000226]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 58/66] [Batch classify loss: 0.000333]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 59/66] [Batch classify loss: 0.000299]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 60/66] [Batch classify loss: 0.000288]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 61/66] [Batch classify loss: 0.000345]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 62/66] [Batch classify loss: 0.000247]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 63/66] [Batch classify loss: 0.000248]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 64/66] [Batch classify loss: 0.000370]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 23/50] [Batch 65/66] [Batch classify loss: 0.000309]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 23/50] [Batch 66/66] [Batch classify loss: 0.000228]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0023 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0023 epoch rmt trained classifier loss on the clean testing examples:1440.5575
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0023 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0023 epoch rmt trained classifier loss on adversarial testset:2319.6279296875


23epoch learning rate:1.0000000000000003e-05
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 1/66] [Batch classify loss: 0.000274]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 2/66] [Batch classify loss: 0.000286]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 3/66] [Batch classify loss: 0.000255]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 4/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 5/66] [Batch classify loss: 0.000296]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 6/66] [Batch classify loss: 0.000298]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 7/66] [Batch classify loss: 0.000267]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 8/66] [Batch classify loss: 0.000238]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 9/66] [Batch classify loss: 0.000277]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 10/66] [Batch classify loss: 0.000275]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 11/66] [Batch classify loss: 0.000217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 12/66] [Batch classify loss: 0.000270]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 13/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 14/66] [Batch classify loss: 0.000310]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 15/66] [Batch classify loss: 0.000272]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 16/66] [Batch classify loss: 0.000345]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 17/66] [Batch classify loss: 0.000316]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 18/66] [Batch classify loss: 0.000291]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 19/66] [Batch classify loss: 0.000258]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 20/66] [Batch classify loss: 0.000270]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 21/66] [Batch classify loss: 0.000347]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 22/66] [Batch classify loss: 0.000274]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 23/66] [Batch classify loss: 0.000266]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 24/66] [Batch classify loss: 0.000296]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 25/66] [Batch classify loss: 0.000258]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 26/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 27/66] [Batch classify loss: 0.000279]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 28/66] [Batch classify loss: 0.000296]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 29/66] [Batch classify loss: 0.000259]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 30/66] [Batch classify loss: 0.000297]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 31/66] [Batch classify loss: 0.000238]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 32/66] [Batch classify loss: 0.000261]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 33/66] [Batch classify loss: 0.000260]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 34/66] [Batch classify loss: 0.000262]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 35/66] [Batch classify loss: 0.000309]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 36/66] [Batch classify loss: 0.000302]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 37/66] [Batch classify loss: 0.000260]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 38/66] [Batch classify loss: 0.000243]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 39/66] [Batch classify loss: 0.000223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 40/66] [Batch classify loss: 0.000364]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 41/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 42/66] [Batch classify loss: 0.000297]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 43/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 44/66] [Batch classify loss: 0.000328]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 45/66] [Batch classify loss: 0.000287]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 46/66] [Batch classify loss: 0.000376]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 47/66] [Batch classify loss: 0.000281]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 48/66] [Batch classify loss: 0.000207]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 49/66] [Batch classify loss: 0.000240]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 50/66] [Batch classify loss: 0.000307]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 51/66] [Batch classify loss: 0.000310]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 52/66] [Batch classify loss: 0.000301]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 53/66] [Batch classify loss: 0.000270]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 54/66] [Batch classify loss: 0.000314]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 55/66] [Batch classify loss: 0.000236]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 56/66] [Batch classify loss: 0.000333]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 57/66] [Batch classify loss: 0.000278]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 58/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 59/66] [Batch classify loss: 0.000259]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 60/66] [Batch classify loss: 0.000287]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 61/66] [Batch classify loss: 0.000245]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 62/66] [Batch classify loss: 0.000244]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 63/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 64/66] [Batch classify loss: 0.000354]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 24/50] [Batch 65/66] [Batch classify loss: 0.000393]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 24/50] [Batch 66/66] [Batch classify loss: 0.000276]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0024 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0024 epoch rmt trained classifier loss on the clean testing examples:1436.7771
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0024 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0024 epoch rmt trained classifier loss on adversarial testset:2312.854736328125


24epoch learning rate:1.0000000000000003e-05
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 1/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 2/66] [Batch classify loss: 0.000283]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 3/66] [Batch classify loss: 0.000327]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 4/66] [Batch classify loss: 0.000533]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 5/66] [Batch classify loss: 0.000343]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 6/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 7/66] [Batch classify loss: 0.000310]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 8/66] [Batch classify loss: 0.000234]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 9/66] [Batch classify loss: 0.000269]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 10/66] [Batch classify loss: 0.000316]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 11/66] [Batch classify loss: 0.000301]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 12/66] [Batch classify loss: 0.000266]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 13/66] [Batch classify loss: 0.000288]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 14/66] [Batch classify loss: 0.000249]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 15/66] [Batch classify loss: 0.000249]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 16/66] [Batch classify loss: 0.000264]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 17/66] [Batch classify loss: 0.000266]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 18/66] [Batch classify loss: 0.000215]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 19/66] [Batch classify loss: 0.000291]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 20/66] [Batch classify loss: 0.000275]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 21/66] [Batch classify loss: 0.000247]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 22/66] [Batch classify loss: 0.000312]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 23/66] [Batch classify loss: 0.000240]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 24/66] [Batch classify loss: 0.000262]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 25/66] [Batch classify loss: 0.000230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 26/66] [Batch classify loss: 0.000298]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 27/66] [Batch classify loss: 0.000336]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 28/66] [Batch classify loss: 0.000189]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 29/66] [Batch classify loss: 0.000322]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 30/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 31/66] [Batch classify loss: 0.000205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 32/66] [Batch classify loss: 0.000319]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 33/66] [Batch classify loss: 0.000193]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 34/66] [Batch classify loss: 0.000235]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 35/66] [Batch classify loss: 0.000318]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 36/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 37/66] [Batch classify loss: 0.000237]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 38/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 39/66] [Batch classify loss: 0.000265]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 40/66] [Batch classify loss: 0.000259]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 41/66] [Batch classify loss: 0.000229]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 42/66] [Batch classify loss: 0.000227]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 43/66] [Batch classify loss: 0.000333]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 44/66] [Batch classify loss: 0.000263]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 45/66] [Batch classify loss: 0.000243]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 46/66] [Batch classify loss: 0.000239]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 47/66] [Batch classify loss: 0.000319]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 48/66] [Batch classify loss: 0.000210]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 49/66] [Batch classify loss: 0.000276]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 50/66] [Batch classify loss: 0.000419]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 51/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 52/66] [Batch classify loss: 0.000227]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 53/66] [Batch classify loss: 0.000262]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 54/66] [Batch classify loss: 0.000284]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 55/66] [Batch classify loss: 0.000294]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 56/66] [Batch classify loss: 0.000340]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 57/66] [Batch classify loss: 0.000262]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 58/66] [Batch classify loss: 0.000257]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 59/66] [Batch classify loss: 0.000247]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 60/66] [Batch classify loss: 0.000268]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 61/66] [Batch classify loss: 0.000239]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 62/66] [Batch classify loss: 0.000259]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 63/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 64/66] [Batch classify loss: 0.000369]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 25/50] [Batch 65/66] [Batch classify loss: 0.000227]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 25/50] [Batch 66/66] [Batch classify loss: 0.000247]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0025 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0025 epoch rmt trained classifier loss on the clean testing examples:1454.5752
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0025 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0025 epoch rmt trained classifier loss on adversarial testset:2345.635009765625


25epoch learning rate:1.0000000000000003e-05
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 1/66] [Batch classify loss: 0.000322]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 2/66] [Batch classify loss: 0.000419]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 3/66] [Batch classify loss: 0.000318]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 4/66] [Batch classify loss: 0.000215]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 5/66] [Batch classify loss: 0.000301]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 6/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 7/66] [Batch classify loss: 0.000293]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 8/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 9/66] [Batch classify loss: 0.000304]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 10/66] [Batch classify loss: 0.000234]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 11/66] [Batch classify loss: 0.000250]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 12/66] [Batch classify loss: 0.000252]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 13/66] [Batch classify loss: 0.000275]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 14/66] [Batch classify loss: 0.000259]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 15/66] [Batch classify loss: 0.000229]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 16/66] [Batch classify loss: 0.000259]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 17/66] [Batch classify loss: 0.000235]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 18/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 19/66] [Batch classify loss: 0.000306]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 20/66] [Batch classify loss: 0.000251]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 21/66] [Batch classify loss: 0.000281]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 22/66] [Batch classify loss: 0.000304]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 23/66] [Batch classify loss: 0.000237]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 24/66] [Batch classify loss: 0.000381]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 25/66] [Batch classify loss: 0.000247]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 26/66] [Batch classify loss: 0.000281]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 27/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 28/66] [Batch classify loss: 0.000218]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 29/66] [Batch classify loss: 0.000252]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 30/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 31/66] [Batch classify loss: 0.000263]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 32/66] [Batch classify loss: 0.000298]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 33/66] [Batch classify loss: 0.000308]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 34/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 35/66] [Batch classify loss: 0.000315]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 36/66] [Batch classify loss: 0.000298]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 37/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 38/66] [Batch classify loss: 0.000187]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 39/66] [Batch classify loss: 0.000259]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 40/66] [Batch classify loss: 0.000259]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 41/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 42/66] [Batch classify loss: 0.000277]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 43/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 44/66] [Batch classify loss: 0.000237]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 45/66] [Batch classify loss: 0.000292]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 46/66] [Batch classify loss: 0.000259]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 47/66] [Batch classify loss: 0.000253]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 48/66] [Batch classify loss: 0.000331]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 49/66] [Batch classify loss: 0.000213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 50/66] [Batch classify loss: 0.000308]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 51/66] [Batch classify loss: 0.000243]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 52/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 53/66] [Batch classify loss: 0.000251]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 54/66] [Batch classify loss: 0.000375]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 55/66] [Batch classify loss: 0.000232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 56/66] [Batch classify loss: 0.000218]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 57/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 58/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 59/66] [Batch classify loss: 0.000229]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 60/66] [Batch classify loss: 0.000286]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 61/66] [Batch classify loss: 0.000387]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 62/66] [Batch classify loss: 0.000341]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 63/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 64/66] [Batch classify loss: 0.000258]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 26/50] [Batch 65/66] [Batch classify loss: 0.000288]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 26/50] [Batch 66/66] [Batch classify loss: 0.000227]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0026 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0026 epoch rmt trained classifier loss on the clean testing examples:1529.5480
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0026 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0026 epoch rmt trained classifier loss on adversarial testset:2462.44970703125


26epoch learning rate:1.0000000000000003e-05
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 1/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 2/66] [Batch classify loss: 0.000176]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 3/66] [Batch classify loss: 0.000256]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 4/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 5/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 6/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 7/66] [Batch classify loss: 0.000267]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 8/66] [Batch classify loss: 0.000252]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 9/66] [Batch classify loss: 0.000235]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 10/66] [Batch classify loss: 0.000253]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 11/66] [Batch classify loss: 0.000260]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 12/66] [Batch classify loss: 0.000251]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 13/66] [Batch classify loss: 0.000239]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 14/66] [Batch classify loss: 0.000248]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 15/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 16/66] [Batch classify loss: 0.000224]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 17/66] [Batch classify loss: 0.000276]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 18/66] [Batch classify loss: 0.000250]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 19/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 20/66] [Batch classify loss: 0.000247]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 21/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 22/66] [Batch classify loss: 0.000249]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 23/66] [Batch classify loss: 0.000415]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 24/66] [Batch classify loss: 0.000389]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 25/66] [Batch classify loss: 0.000251]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 26/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 27/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 28/66] [Batch classify loss: 0.000258]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 29/66] [Batch classify loss: 0.000235]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 30/66] [Batch classify loss: 0.000241]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 31/66] [Batch classify loss: 0.000239]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 32/66] [Batch classify loss: 0.000251]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 33/66] [Batch classify loss: 0.000232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 34/66] [Batch classify loss: 0.000299]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 35/66] [Batch classify loss: 0.000318]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 36/66] [Batch classify loss: 0.000253]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 37/66] [Batch classify loss: 0.000239]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 38/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 39/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 40/66] [Batch classify loss: 0.000260]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 41/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 42/66] [Batch classify loss: 0.000265]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 43/66] [Batch classify loss: 0.000203]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 44/66] [Batch classify loss: 0.000312]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 45/66] [Batch classify loss: 0.000240]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 46/66] [Batch classify loss: 0.000230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 47/66] [Batch classify loss: 0.000224]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 48/66] [Batch classify loss: 0.000260]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 49/66] [Batch classify loss: 0.000232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 50/66] [Batch classify loss: 0.000252]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 51/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 52/66] [Batch classify loss: 0.000244]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 53/66] [Batch classify loss: 0.000242]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 54/66] [Batch classify loss: 0.000234]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 55/66] [Batch classify loss: 0.000231]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 56/66] [Batch classify loss: 0.000240]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 57/66] [Batch classify loss: 0.000237]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 58/66] [Batch classify loss: 0.000312]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 59/66] [Batch classify loss: 0.000240]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 60/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 61/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 62/66] [Batch classify loss: 0.000256]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 63/66] [Batch classify loss: 0.000244]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 64/66] [Batch classify loss: 0.000212]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 27/50] [Batch 65/66] [Batch classify loss: 0.000193]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 27/50] [Batch 66/66] [Batch classify loss: 0.000225]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0027 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0027 epoch rmt trained classifier loss on the clean testing examples:1524.3613
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0027 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0027 epoch rmt trained classifier loss on adversarial testset:2444.538330078125


27epoch learning rate:1.0000000000000003e-05
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 1/66] [Batch classify loss: 0.000166]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 2/66] [Batch classify loss: 0.000251]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 3/66] [Batch classify loss: 0.000199]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 4/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 5/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 6/66] [Batch classify loss: 0.000241]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 7/66] [Batch classify loss: 0.000262]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 8/66] [Batch classify loss: 0.000348]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 9/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 10/66] [Batch classify loss: 0.000277]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 11/66] [Batch classify loss: 0.000262]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 12/66] [Batch classify loss: 0.000236]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 13/66] [Batch classify loss: 0.000223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 14/66] [Batch classify loss: 0.000262]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 15/66] [Batch classify loss: 0.000226]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 16/66] [Batch classify loss: 0.000217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 17/66] [Batch classify loss: 0.000255]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 18/66] [Batch classify loss: 0.000297]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 19/66] [Batch classify loss: 0.000231]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 20/66] [Batch classify loss: 0.000322]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 21/66] [Batch classify loss: 0.000236]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 22/66] [Batch classify loss: 0.000234]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 23/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 24/66] [Batch classify loss: 0.000265]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 25/66] [Batch classify loss: 0.000190]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 26/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 27/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 28/66] [Batch classify loss: 0.000223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 29/66] [Batch classify loss: 0.000305]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 30/66] [Batch classify loss: 0.000176]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 31/66] [Batch classify loss: 0.000191]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 32/66] [Batch classify loss: 0.000212]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 33/66] [Batch classify loss: 0.000191]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 34/66] [Batch classify loss: 0.000213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 35/66] [Batch classify loss: 0.000205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 36/66] [Batch classify loss: 0.000324]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 37/66] [Batch classify loss: 0.000287]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 38/66] [Batch classify loss: 0.000279]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 39/66] [Batch classify loss: 0.000225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 40/66] [Batch classify loss: 0.000267]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 41/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 42/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 43/66] [Batch classify loss: 0.000307]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 44/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 45/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 46/66] [Batch classify loss: 0.000242]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 47/66] [Batch classify loss: 0.000236]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 48/66] [Batch classify loss: 0.000223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 49/66] [Batch classify loss: 0.000230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 50/66] [Batch classify loss: 0.000243]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 51/66] [Batch classify loss: 0.000289]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 52/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 53/66] [Batch classify loss: 0.000190]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 54/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 55/66] [Batch classify loss: 0.000241]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 56/66] [Batch classify loss: 0.000304]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 57/66] [Batch classify loss: 0.000223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 58/66] [Batch classify loss: 0.000172]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 59/66] [Batch classify loss: 0.000282]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 60/66] [Batch classify loss: 0.000205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 61/66] [Batch classify loss: 0.000203]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 62/66] [Batch classify loss: 0.000248]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 63/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 64/66] [Batch classify loss: 0.000217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 28/50] [Batch 65/66] [Batch classify loss: 0.000210]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 28/50] [Batch 66/66] [Batch classify loss: 0.000217]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0028 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0028 epoch rmt trained classifier loss on the clean testing examples:1461.4668
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0028 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0028 epoch rmt trained classifier loss on adversarial testset:2352.84423828125


28epoch learning rate:1.0000000000000003e-05
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 1/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 2/66] [Batch classify loss: 0.000225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 3/66] [Batch classify loss: 0.000273]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 4/66] [Batch classify loss: 0.000193]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 5/66] [Batch classify loss: 0.000283]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 6/66] [Batch classify loss: 0.000237]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 7/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 8/66] [Batch classify loss: 0.000205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 9/66] [Batch classify loss: 0.000184]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 10/66] [Batch classify loss: 0.000295]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 11/66] [Batch classify loss: 0.000264]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 12/66] [Batch classify loss: 0.000304]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 13/66] [Batch classify loss: 0.000246]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 14/66] [Batch classify loss: 0.000266]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 15/66] [Batch classify loss: 0.000264]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 16/66] [Batch classify loss: 0.000231]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 17/66] [Batch classify loss: 0.000249]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 18/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 19/66] [Batch classify loss: 0.000235]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 20/66] [Batch classify loss: 0.000245]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 21/66] [Batch classify loss: 0.000264]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 22/66] [Batch classify loss: 0.000342]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 23/66] [Batch classify loss: 0.000252]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 24/66] [Batch classify loss: 0.000225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 25/66] [Batch classify loss: 0.000231]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 26/66] [Batch classify loss: 0.000238]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 27/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 28/66] [Batch classify loss: 0.000241]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 29/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 30/66] [Batch classify loss: 0.000213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 31/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 32/66] [Batch classify loss: 0.000238]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 33/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 34/66] [Batch classify loss: 0.000215]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 35/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 36/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 37/66] [Batch classify loss: 0.000230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 38/66] [Batch classify loss: 0.000239]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 39/66] [Batch classify loss: 0.000259]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 40/66] [Batch classify loss: 0.000260]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 41/66] [Batch classify loss: 0.000309]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 42/66] [Batch classify loss: 0.000229]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 43/66] [Batch classify loss: 0.000208]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 44/66] [Batch classify loss: 0.000183]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 45/66] [Batch classify loss: 0.000246]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 46/66] [Batch classify loss: 0.000224]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 47/66] [Batch classify loss: 0.000250]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 48/66] [Batch classify loss: 0.000250]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 49/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 50/66] [Batch classify loss: 0.000257]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 51/66] [Batch classify loss: 0.000213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 52/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 53/66] [Batch classify loss: 0.000234]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 54/66] [Batch classify loss: 0.000208]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 55/66] [Batch classify loss: 0.000162]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 56/66] [Batch classify loss: 0.000210]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 57/66] [Batch classify loss: 0.000251]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 58/66] [Batch classify loss: 0.000207]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 59/66] [Batch classify loss: 0.000212]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 60/66] [Batch classify loss: 0.000376]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 61/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 62/66] [Batch classify loss: 0.000185]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 63/66] [Batch classify loss: 0.000255]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 64/66] [Batch classify loss: 0.000190]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 29/50] [Batch 65/66] [Batch classify loss: 0.000217]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 29/50] [Batch 66/66] [Batch classify loss: 0.000174]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0029 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0029 epoch rmt trained classifier loss on the clean testing examples:1516.2971
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0029 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0029 epoch rmt trained classifier loss on adversarial testset:2438.832763671875


29epoch learning rate:1.0000000000000003e-05
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 1/66] [Batch classify loss: 0.000298]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 2/66] [Batch classify loss: 0.000199]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 3/66] [Batch classify loss: 0.000241]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 4/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 5/66] [Batch classify loss: 0.000184]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 6/66] [Batch classify loss: 0.000223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 7/66] [Batch classify loss: 0.000225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 8/66] [Batch classify loss: 0.000246]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 9/66] [Batch classify loss: 0.000224]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 10/66] [Batch classify loss: 0.000172]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 11/66] [Batch classify loss: 0.000232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 12/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 13/66] [Batch classify loss: 0.000255]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 14/66] [Batch classify loss: 0.000218]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 15/66] [Batch classify loss: 0.000224]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 16/66] [Batch classify loss: 0.000218]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 17/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 18/66] [Batch classify loss: 0.000272]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 19/66] [Batch classify loss: 0.000213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 20/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 21/66] [Batch classify loss: 0.000264]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 22/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 23/66] [Batch classify loss: 0.000187]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 24/66] [Batch classify loss: 0.000230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 25/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 26/66] [Batch classify loss: 0.000244]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 27/66] [Batch classify loss: 0.000262]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 28/66] [Batch classify loss: 0.000175]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 29/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 30/66] [Batch classify loss: 0.000265]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 31/66] [Batch classify loss: 0.000382]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 32/66] [Batch classify loss: 0.000259]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 33/66] [Batch classify loss: 0.000321]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 34/66] [Batch classify loss: 0.000189]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 35/66] [Batch classify loss: 0.000203]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 36/66] [Batch classify loss: 0.000254]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 37/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 38/66] [Batch classify loss: 0.000255]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 39/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 40/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 41/66] [Batch classify loss: 0.000191]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 42/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 43/66] [Batch classify loss: 0.000174]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 44/66] [Batch classify loss: 0.000185]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 45/66] [Batch classify loss: 0.000191]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 46/66] [Batch classify loss: 0.000183]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 47/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 48/66] [Batch classify loss: 0.000218]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 49/66] [Batch classify loss: 0.000200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 50/66] [Batch classify loss: 0.000166]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 51/66] [Batch classify loss: 0.000158]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 52/66] [Batch classify loss: 0.000224]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 53/66] [Batch classify loss: 0.000275]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 54/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 55/66] [Batch classify loss: 0.000173]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 56/66] [Batch classify loss: 0.000223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 57/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 58/66] [Batch classify loss: 0.000217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 59/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 60/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 61/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 62/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 63/66] [Batch classify loss: 0.000213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 64/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 30/50] [Batch 65/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 30/50] [Batch 66/66] [Batch classify loss: 0.000181]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0030 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0030 epoch rmt trained classifier loss on the clean testing examples:1507.8943
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0030 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0030 epoch rmt trained classifier loss on adversarial testset:2434.654052734375


30epoch learning rate:1.0000000000000002e-06
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 1/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 2/66] [Batch classify loss: 0.000251]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 3/66] [Batch classify loss: 0.000248]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 4/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 5/66] [Batch classify loss: 0.000226]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 6/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 7/66] [Batch classify loss: 0.000210]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 8/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 9/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 10/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 11/66] [Batch classify loss: 0.000275]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 12/66] [Batch classify loss: 0.000168]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 13/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 14/66] [Batch classify loss: 0.000203]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 15/66] [Batch classify loss: 0.000192]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 16/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 17/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 18/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 19/66] [Batch classify loss: 0.000213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 20/66] [Batch classify loss: 0.000161]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 21/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 22/66] [Batch classify loss: 0.000185]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 23/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 24/66] [Batch classify loss: 0.000232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 25/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 26/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 27/66] [Batch classify loss: 0.000205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 28/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 29/66] [Batch classify loss: 0.000205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 30/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 31/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 32/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 33/66] [Batch classify loss: 0.000273]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 34/66] [Batch classify loss: 0.000187]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 35/66] [Batch classify loss: 0.000169]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 36/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 37/66] [Batch classify loss: 0.000227]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 38/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 39/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 40/66] [Batch classify loss: 0.000162]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 41/66] [Batch classify loss: 0.000190]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 42/66] [Batch classify loss: 0.000173]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 43/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 44/66] [Batch classify loss: 0.000193]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 45/66] [Batch classify loss: 0.000199]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 46/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 47/66] [Batch classify loss: 0.000171]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 48/66] [Batch classify loss: 0.000233]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 49/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 50/66] [Batch classify loss: 0.000282]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 51/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 52/66] [Batch classify loss: 0.000193]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 53/66] [Batch classify loss: 0.000276]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 54/66] [Batch classify loss: 0.000173]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 55/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 56/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 57/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 58/66] [Batch classify loss: 0.000280]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 59/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 60/66] [Batch classify loss: 0.000304]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 61/66] [Batch classify loss: 0.000258]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 62/66] [Batch classify loss: 0.000280]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 63/66] [Batch classify loss: 0.000174]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 64/66] [Batch classify loss: 0.000283]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 31/50] [Batch 65/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 31/50] [Batch 66/66] [Batch classify loss: 0.000177]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0031 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0031 epoch rmt trained classifier loss on the clean testing examples:1559.6144
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0031 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0031 epoch rmt trained classifier loss on adversarial testset:2518.554443359375


31epoch learning rate:1.0000000000000002e-06
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 1/66] [Batch classify loss: 0.000207]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 2/66] [Batch classify loss: 0.000230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 3/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 4/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 5/66] [Batch classify loss: 0.000203]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 6/66] [Batch classify loss: 0.000252]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 7/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 8/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 9/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 10/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 11/66] [Batch classify loss: 0.000256]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 12/66] [Batch classify loss: 0.000240]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 13/66] [Batch classify loss: 0.000271]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 14/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 15/66] [Batch classify loss: 0.000243]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 16/66] [Batch classify loss: 0.000190]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 17/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 18/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 19/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 20/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 21/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 22/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 23/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 24/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 25/66] [Batch classify loss: 0.000232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 26/66] [Batch classify loss: 0.000207]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 27/66] [Batch classify loss: 0.000173]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 28/66] [Batch classify loss: 0.000250]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 29/66] [Batch classify loss: 0.000348]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 30/66] [Batch classify loss: 0.000258]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 31/66] [Batch classify loss: 0.000269]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 32/66] [Batch classify loss: 0.000175]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 33/66] [Batch classify loss: 0.000248]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 34/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 35/66] [Batch classify loss: 0.000231]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 36/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 37/66] [Batch classify loss: 0.000191]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 38/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 39/66] [Batch classify loss: 0.000175]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 40/66] [Batch classify loss: 0.000243]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 41/66] [Batch classify loss: 0.000158]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 42/66] [Batch classify loss: 0.000242]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 43/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 44/66] [Batch classify loss: 0.000235]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 45/66] [Batch classify loss: 0.000213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 46/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 47/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 48/66] [Batch classify loss: 0.000225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 49/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 50/66] [Batch classify loss: 0.000246]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 51/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 52/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 53/66] [Batch classify loss: 0.000243]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 54/66] [Batch classify loss: 0.000255]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 55/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 56/66] [Batch classify loss: 0.000233]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 57/66] [Batch classify loss: 0.000319]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 58/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 59/66] [Batch classify loss: 0.000183]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 60/66] [Batch classify loss: 0.000234]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 61/66] [Batch classify loss: 0.000227]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 62/66] [Batch classify loss: 0.000215]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 63/66] [Batch classify loss: 0.000185]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 64/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 32/50] [Batch 65/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 32/50] [Batch 66/66] [Batch classify loss: 0.000333]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0032 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0032 epoch rmt trained classifier loss on the clean testing examples:1568.5033
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0032 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0032 epoch rmt trained classifier loss on adversarial testset:2530.754150390625


32epoch learning rate:1.0000000000000002e-06
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 1/66] [Batch classify loss: 0.000232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 2/66] [Batch classify loss: 0.000268]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 3/66] [Batch classify loss: 0.000247]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 4/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 5/66] [Batch classify loss: 0.000237]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 6/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 7/66] [Batch classify loss: 0.000185]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 8/66] [Batch classify loss: 0.000184]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 9/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 10/66] [Batch classify loss: 0.000223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 11/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 12/66] [Batch classify loss: 0.000183]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 13/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 14/66] [Batch classify loss: 0.000287]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 15/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 16/66] [Batch classify loss: 0.000158]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 17/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 18/66] [Batch classify loss: 0.000270]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 19/66] [Batch classify loss: 0.000250]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 20/66] [Batch classify loss: 0.000200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 21/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 22/66] [Batch classify loss: 0.000183]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 23/66] [Batch classify loss: 0.000175]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 24/66] [Batch classify loss: 0.000226]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 25/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 26/66] [Batch classify loss: 0.000273]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 27/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 28/66] [Batch classify loss: 0.000164]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 29/66] [Batch classify loss: 0.000175]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 30/66] [Batch classify loss: 0.000227]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 31/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 32/66] [Batch classify loss: 0.000169]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 33/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 34/66] [Batch classify loss: 0.000189]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 35/66] [Batch classify loss: 0.000192]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 36/66] [Batch classify loss: 0.000205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 37/66] [Batch classify loss: 0.000183]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 38/66] [Batch classify loss: 0.000261]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 39/66] [Batch classify loss: 0.000246]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 40/66] [Batch classify loss: 0.000208]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 41/66] [Batch classify loss: 0.000234]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 42/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 43/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 44/66] [Batch classify loss: 0.000243]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 45/66] [Batch classify loss: 0.000237]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 46/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 47/66] [Batch classify loss: 0.000208]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 48/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 49/66] [Batch classify loss: 0.000282]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 50/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 51/66] [Batch classify loss: 0.000193]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 52/66] [Batch classify loss: 0.000233]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 53/66] [Batch classify loss: 0.000187]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 54/66] [Batch classify loss: 0.000205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 55/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 56/66] [Batch classify loss: 0.000163]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 57/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 58/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 59/66] [Batch classify loss: 0.000257]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 60/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 61/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 62/66] [Batch classify loss: 0.000300]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 63/66] [Batch classify loss: 0.000208]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 64/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 33/50] [Batch 65/66] [Batch classify loss: 0.000236]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 33/50] [Batch 66/66] [Batch classify loss: 0.000223]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0033 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0033 epoch rmt trained classifier loss on the clean testing examples:1552.2491
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0033 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0033 epoch rmt trained classifier loss on adversarial testset:2500.55078125


33epoch learning rate:1.0000000000000002e-06
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 1/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 2/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 3/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 4/66] [Batch classify loss: 0.000152]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 5/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 6/66] [Batch classify loss: 0.000173]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 7/66] [Batch classify loss: 0.000200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 8/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 9/66] [Batch classify loss: 0.000227]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 10/66] [Batch classify loss: 0.000193]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 11/66] [Batch classify loss: 0.000234]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 12/66] [Batch classify loss: 0.000268]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 13/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 14/66] [Batch classify loss: 0.000218]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 15/66] [Batch classify loss: 0.000248]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 16/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 17/66] [Batch classify loss: 0.000213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 18/66] [Batch classify loss: 0.000167]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 19/66] [Batch classify loss: 0.000210]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 20/66] [Batch classify loss: 0.000300]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 21/66] [Batch classify loss: 0.000230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 22/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 23/66] [Batch classify loss: 0.000247]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 24/66] [Batch classify loss: 0.000230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 25/66] [Batch classify loss: 0.000193]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 26/66] [Batch classify loss: 0.000245]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 27/66] [Batch classify loss: 0.000184]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 28/66] [Batch classify loss: 0.000189]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 29/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 30/66] [Batch classify loss: 0.000155]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 31/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 32/66] [Batch classify loss: 0.000271]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 33/66] [Batch classify loss: 0.000280]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 34/66] [Batch classify loss: 0.000185]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 35/66] [Batch classify loss: 0.000185]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 36/66] [Batch classify loss: 0.000217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 37/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 38/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 39/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 40/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 41/66] [Batch classify loss: 0.000174]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 42/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 43/66] [Batch classify loss: 0.000200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 44/66] [Batch classify loss: 0.000185]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 45/66] [Batch classify loss: 0.000233]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 46/66] [Batch classify loss: 0.000227]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 47/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 48/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 49/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 50/66] [Batch classify loss: 0.000244]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 51/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 52/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 53/66] [Batch classify loss: 0.000233]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 54/66] [Batch classify loss: 0.000185]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 55/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 56/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 57/66] [Batch classify loss: 0.000189]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 58/66] [Batch classify loss: 0.000278]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 59/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 60/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 61/66] [Batch classify loss: 0.000200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 62/66] [Batch classify loss: 0.000252]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 63/66] [Batch classify loss: 0.000227]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 64/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 34/50] [Batch 65/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 34/50] [Batch 66/66] [Batch classify loss: 0.000227]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0034 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0034 epoch rmt trained classifier loss on the clean testing examples:1532.0345
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0034 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0034 epoch rmt trained classifier loss on adversarial testset:2473.29296875


34epoch learning rate:1.0000000000000002e-06
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 1/66] [Batch classify loss: 0.000251]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 2/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 3/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 4/66] [Batch classify loss: 0.000236]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 5/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 6/66] [Batch classify loss: 0.000319]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 7/66] [Batch classify loss: 0.000175]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 8/66] [Batch classify loss: 0.000245]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 9/66] [Batch classify loss: 0.000226]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 10/66] [Batch classify loss: 0.000215]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 11/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 12/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 13/66] [Batch classify loss: 0.000256]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 14/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 15/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 16/66] [Batch classify loss: 0.000236]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 17/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 18/66] [Batch classify loss: 0.000254]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 19/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 20/66] [Batch classify loss: 0.000317]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 21/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 22/66] [Batch classify loss: 0.000184]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 23/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 24/66] [Batch classify loss: 0.000230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 25/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 26/66] [Batch classify loss: 0.000199]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 27/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 28/66] [Batch classify loss: 0.000230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 29/66] [Batch classify loss: 0.000226]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 30/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 31/66] [Batch classify loss: 0.000224]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 32/66] [Batch classify loss: 0.000225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 33/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 34/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 35/66] [Batch classify loss: 0.000267]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 36/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 37/66] [Batch classify loss: 0.000167]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 38/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 39/66] [Batch classify loss: 0.000223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 40/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 41/66] [Batch classify loss: 0.000146]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 42/66] [Batch classify loss: 0.000303]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 43/66] [Batch classify loss: 0.000249]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 44/66] [Batch classify loss: 0.000271]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 45/66] [Batch classify loss: 0.000225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 46/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 47/66] [Batch classify loss: 0.000166]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 48/66] [Batch classify loss: 0.000258]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 49/66] [Batch classify loss: 0.000217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 50/66] [Batch classify loss: 0.000225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 51/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 52/66] [Batch classify loss: 0.000229]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 53/66] [Batch classify loss: 0.000253]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 54/66] [Batch classify loss: 0.000230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 55/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 56/66] [Batch classify loss: 0.000210]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 57/66] [Batch classify loss: 0.000165]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 58/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 59/66] [Batch classify loss: 0.000173]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 60/66] [Batch classify loss: 0.000223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 61/66] [Batch classify loss: 0.000217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 62/66] [Batch classify loss: 0.000213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 63/66] [Batch classify loss: 0.000327]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 64/66] [Batch classify loss: 0.000249]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 35/50] [Batch 65/66] [Batch classify loss: 0.000270]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 35/50] [Batch 66/66] [Batch classify loss: 0.000173]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0035 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0035 epoch rmt trained classifier loss on the clean testing examples:1591.5493
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0035 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0035 epoch rmt trained classifier loss on adversarial testset:2569.225341796875


35epoch learning rate:1.0000000000000002e-06
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 1/66] [Batch classify loss: 0.000232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 2/66] [Batch classify loss: 0.000231]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 3/66] [Batch classify loss: 0.000250]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 4/66] [Batch classify loss: 0.000225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 5/66] [Batch classify loss: 0.000174]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 6/66] [Batch classify loss: 0.000207]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 7/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 8/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 9/66] [Batch classify loss: 0.000258]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 10/66] [Batch classify loss: 0.000255]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 11/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 12/66] [Batch classify loss: 0.000175]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 13/66] [Batch classify loss: 0.000169]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 14/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 15/66] [Batch classify loss: 0.000253]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 16/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 17/66] [Batch classify loss: 0.000269]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 18/66] [Batch classify loss: 0.000169]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 19/66] [Batch classify loss: 0.000256]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 20/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 21/66] [Batch classify loss: 0.000303]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 22/66] [Batch classify loss: 0.000235]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 23/66] [Batch classify loss: 0.000232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 24/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 25/66] [Batch classify loss: 0.000184]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 26/66] [Batch classify loss: 0.000297]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 27/66] [Batch classify loss: 0.000200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 28/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 29/66] [Batch classify loss: 0.000142]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 30/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 31/66] [Batch classify loss: 0.000291]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 32/66] [Batch classify loss: 0.000163]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 33/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 34/66] [Batch classify loss: 0.000147]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 35/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 36/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 37/66] [Batch classify loss: 0.000184]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 38/66] [Batch classify loss: 0.000193]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 39/66] [Batch classify loss: 0.000224]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 40/66] [Batch classify loss: 0.000227]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 41/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 42/66] [Batch classify loss: 0.000208]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 43/66] [Batch classify loss: 0.000234]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 44/66] [Batch classify loss: 0.000193]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 45/66] [Batch classify loss: 0.000192]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 46/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 47/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 48/66] [Batch classify loss: 0.000224]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 49/66] [Batch classify loss: 0.000172]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 50/66] [Batch classify loss: 0.000240]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 51/66] [Batch classify loss: 0.000183]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 52/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 53/66] [Batch classify loss: 0.000212]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 54/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 55/66] [Batch classify loss: 0.000244]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 56/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 57/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 58/66] [Batch classify loss: 0.000234]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 59/66] [Batch classify loss: 0.000237]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 60/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 61/66] [Batch classify loss: 0.000166]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 62/66] [Batch classify loss: 0.000183]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 63/66] [Batch classify loss: 0.000163]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 64/66] [Batch classify loss: 0.000208]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 36/50] [Batch 65/66] [Batch classify loss: 0.000263]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 36/50] [Batch 66/66] [Batch classify loss: 0.000263]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0036 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0036 epoch rmt trained classifier loss on the clean testing examples:1611.1384
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0036 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0036 epoch rmt trained classifier loss on adversarial testset:2593.71142578125


36epoch learning rate:1.0000000000000002e-06
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 1/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 2/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 3/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 4/66] [Batch classify loss: 0.000191]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 5/66] [Batch classify loss: 0.000232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 6/66] [Batch classify loss: 0.000263]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 7/66] [Batch classify loss: 0.000203]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 8/66] [Batch classify loss: 0.000223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 9/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 10/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 11/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 12/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 13/66] [Batch classify loss: 0.000174]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 14/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 15/66] [Batch classify loss: 0.000166]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 16/66] [Batch classify loss: 0.000191]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 17/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 18/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 19/66] [Batch classify loss: 0.000161]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 20/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 21/66] [Batch classify loss: 0.000252]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 22/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 23/66] [Batch classify loss: 0.000236]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 24/66] [Batch classify loss: 0.000210]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 25/66] [Batch classify loss: 0.000226]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 26/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 27/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 28/66] [Batch classify loss: 0.000277]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 29/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 30/66] [Batch classify loss: 0.000212]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 31/66] [Batch classify loss: 0.000226]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 32/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 33/66] [Batch classify loss: 0.000148]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 34/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 35/66] [Batch classify loss: 0.000183]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 36/66] [Batch classify loss: 0.000176]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 37/66] [Batch classify loss: 0.000227]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 38/66] [Batch classify loss: 0.000248]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 39/66] [Batch classify loss: 0.000203]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 40/66] [Batch classify loss: 0.000270]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 41/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 42/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 43/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 44/66] [Batch classify loss: 0.000205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 45/66] [Batch classify loss: 0.000253]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 46/66] [Batch classify loss: 0.000174]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 47/66] [Batch classify loss: 0.000241]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 48/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 49/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 50/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 51/66] [Batch classify loss: 0.000238]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 52/66] [Batch classify loss: 0.000271]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 53/66] [Batch classify loss: 0.000190]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 54/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 55/66] [Batch classify loss: 0.000140]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 56/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 57/66] [Batch classify loss: 0.000253]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 58/66] [Batch classify loss: 0.000187]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 59/66] [Batch classify loss: 0.000272]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 60/66] [Batch classify loss: 0.000192]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 61/66] [Batch classify loss: 0.000175]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 62/66] [Batch classify loss: 0.000161]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 63/66] [Batch classify loss: 0.000234]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 64/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 37/50] [Batch 65/66] [Batch classify loss: 0.000169]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 37/50] [Batch 66/66] [Batch classify loss: 0.000142]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0037 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0037 epoch rmt trained classifier loss on the clean testing examples:1569.6908
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0037 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0037 epoch rmt trained classifier loss on adversarial testset:2525.25


37epoch learning rate:1.0000000000000002e-06
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 1/66] [Batch classify loss: 0.000199]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 2/66] [Batch classify loss: 0.000281]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 3/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 4/66] [Batch classify loss: 0.000189]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 5/66] [Batch classify loss: 0.000189]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 6/66] [Batch classify loss: 0.000271]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 7/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 8/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 9/66] [Batch classify loss: 0.000148]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 10/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 11/66] [Batch classify loss: 0.000238]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 12/66] [Batch classify loss: 0.000159]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 13/66] [Batch classify loss: 0.000253]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 14/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 15/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 16/66] [Batch classify loss: 0.000139]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 17/66] [Batch classify loss: 0.000174]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 18/66] [Batch classify loss: 0.000164]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 19/66] [Batch classify loss: 0.000205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 20/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 21/66] [Batch classify loss: 0.000217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 22/66] [Batch classify loss: 0.000172]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 23/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 24/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 25/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 26/66] [Batch classify loss: 0.000284]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 27/66] [Batch classify loss: 0.000187]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 28/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 29/66] [Batch classify loss: 0.000270]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 30/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 31/66] [Batch classify loss: 0.000225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 32/66] [Batch classify loss: 0.000231]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 33/66] [Batch classify loss: 0.000218]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 34/66] [Batch classify loss: 0.000165]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 35/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 36/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 37/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 38/66] [Batch classify loss: 0.000232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 39/66] [Batch classify loss: 0.000212]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 40/66] [Batch classify loss: 0.000176]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 41/66] [Batch classify loss: 0.000207]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 42/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 43/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 44/66] [Batch classify loss: 0.000200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 45/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 46/66] [Batch classify loss: 0.000253]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 47/66] [Batch classify loss: 0.000277]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 48/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 49/66] [Batch classify loss: 0.000215]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 50/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 51/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 52/66] [Batch classify loss: 0.000165]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 53/66] [Batch classify loss: 0.000203]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 54/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 55/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 56/66] [Batch classify loss: 0.000231]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 57/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 58/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 59/66] [Batch classify loss: 0.000173]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 60/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 61/66] [Batch classify loss: 0.000232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 62/66] [Batch classify loss: 0.000144]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 63/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 64/66] [Batch classify loss: 0.000190]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 38/50] [Batch 65/66] [Batch classify loss: 0.000152]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 38/50] [Batch 66/66] [Batch classify loss: 0.000199]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0038 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0038 epoch rmt trained classifier loss on the clean testing examples:1534.9745
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0038 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0038 epoch rmt trained classifier loss on adversarial testset:2471.26318359375


38epoch learning rate:1.0000000000000002e-06
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 1/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 2/66] [Batch classify loss: 0.000213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 3/66] [Batch classify loss: 0.000168]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 4/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 5/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 6/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 7/66] [Batch classify loss: 0.000187]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 8/66] [Batch classify loss: 0.000250]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 9/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 10/66] [Batch classify loss: 0.000266]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 11/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 12/66] [Batch classify loss: 0.000164]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 13/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 14/66] [Batch classify loss: 0.000166]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 15/66] [Batch classify loss: 0.000199]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 16/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 17/66] [Batch classify loss: 0.000227]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 18/66] [Batch classify loss: 0.000161]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 19/66] [Batch classify loss: 0.000285]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 20/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 21/66] [Batch classify loss: 0.000224]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 22/66] [Batch classify loss: 0.000189]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 23/66] [Batch classify loss: 0.000267]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 24/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 25/66] [Batch classify loss: 0.000161]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 26/66] [Batch classify loss: 0.000199]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 27/66] [Batch classify loss: 0.000172]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 28/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 29/66] [Batch classify loss: 0.000193]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 30/66] [Batch classify loss: 0.000162]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 31/66] [Batch classify loss: 0.000217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 32/66] [Batch classify loss: 0.000225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 33/66] [Batch classify loss: 0.000146]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 34/66] [Batch classify loss: 0.000314]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 35/66] [Batch classify loss: 0.000175]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 36/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 37/66] [Batch classify loss: 0.000272]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 38/66] [Batch classify loss: 0.000213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 39/66] [Batch classify loss: 0.000176]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 40/66] [Batch classify loss: 0.000232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 41/66] [Batch classify loss: 0.000365]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 42/66] [Batch classify loss: 0.000199]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 43/66] [Batch classify loss: 0.000212]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 44/66] [Batch classify loss: 0.000271]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 45/66] [Batch classify loss: 0.000205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 46/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 47/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 48/66] [Batch classify loss: 0.000176]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 49/66] [Batch classify loss: 0.000210]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 50/66] [Batch classify loss: 0.000171]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 51/66] [Batch classify loss: 0.000278]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 52/66] [Batch classify loss: 0.000234]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 53/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 54/66] [Batch classify loss: 0.000226]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 55/66] [Batch classify loss: 0.000187]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 56/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 57/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 58/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 59/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 60/66] [Batch classify loss: 0.000205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 61/66] [Batch classify loss: 0.000282]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 62/66] [Batch classify loss: 0.000243]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 63/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 64/66] [Batch classify loss: 0.000223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 39/50] [Batch 65/66] [Batch classify loss: 0.000229]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 39/50] [Batch 66/66] [Batch classify loss: 0.000231]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0039 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0039 epoch rmt trained classifier loss on the clean testing examples:1621.4095
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0039 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0039 epoch rmt trained classifier loss on adversarial testset:2612.594970703125


39epoch learning rate:1.0000000000000002e-06
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 1/66] [Batch classify loss: 0.000187]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 2/66] [Batch classify loss: 0.000169]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 3/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 4/66] [Batch classify loss: 0.000192]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 5/66] [Batch classify loss: 0.000159]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 6/66] [Batch classify loss: 0.000291]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 7/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 8/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 9/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 10/66] [Batch classify loss: 0.000191]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 11/66] [Batch classify loss: 0.000213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 12/66] [Batch classify loss: 0.000137]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 13/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 14/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 15/66] [Batch classify loss: 0.000200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 16/66] [Batch classify loss: 0.000169]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 17/66] [Batch classify loss: 0.000192]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 18/66] [Batch classify loss: 0.000171]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 19/66] [Batch classify loss: 0.000252]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 20/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 21/66] [Batch classify loss: 0.000256]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 22/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 23/66] [Batch classify loss: 0.000187]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 24/66] [Batch classify loss: 0.000155]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 25/66] [Batch classify loss: 0.000191]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 26/66] [Batch classify loss: 0.000208]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 27/66] [Batch classify loss: 0.000173]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 28/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 29/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 30/66] [Batch classify loss: 0.000175]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 31/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 32/66] [Batch classify loss: 0.000168]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 33/66] [Batch classify loss: 0.000154]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 34/66] [Batch classify loss: 0.000199]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 35/66] [Batch classify loss: 0.000237]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 36/66] [Batch classify loss: 0.000240]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 37/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 38/66] [Batch classify loss: 0.000171]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 39/66] [Batch classify loss: 0.000174]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 40/66] [Batch classify loss: 0.000247]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 41/66] [Batch classify loss: 0.000325]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 42/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 43/66] [Batch classify loss: 0.000234]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 44/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 45/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 46/66] [Batch classify loss: 0.000212]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 47/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 48/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 49/66] [Batch classify loss: 0.000251]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 50/66] [Batch classify loss: 0.000233]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 51/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 52/66] [Batch classify loss: 0.000272]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 53/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 54/66] [Batch classify loss: 0.000171]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 55/66] [Batch classify loss: 0.000200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 56/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 57/66] [Batch classify loss: 0.000203]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 58/66] [Batch classify loss: 0.000149]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 59/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 60/66] [Batch classify loss: 0.000215]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 61/66] [Batch classify loss: 0.000167]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 62/66] [Batch classify loss: 0.000169]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 63/66] [Batch classify loss: 0.000234]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 64/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 40/50] [Batch 65/66] [Batch classify loss: 0.000293]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 40/50] [Batch 66/66] [Batch classify loss: 0.000147]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0040 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0040 epoch rmt trained classifier loss on the clean testing examples:1635.5863
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0040 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0040 epoch rmt trained classifier loss on adversarial testset:2635.048095703125


40epoch learning rate:1.0000000000000002e-07
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 1/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 2/66] [Batch classify loss: 0.000191]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 3/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 4/66] [Batch classify loss: 0.000242]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 5/66] [Batch classify loss: 0.000200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 6/66] [Batch classify loss: 0.000215]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 7/66] [Batch classify loss: 0.000155]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 8/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 9/66] [Batch classify loss: 0.000212]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 10/66] [Batch classify loss: 0.000190]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 11/66] [Batch classify loss: 0.000175]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 12/66] [Batch classify loss: 0.000252]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 13/66] [Batch classify loss: 0.000249]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 14/66] [Batch classify loss: 0.000260]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 15/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 16/66] [Batch classify loss: 0.000244]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 17/66] [Batch classify loss: 0.000205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 18/66] [Batch classify loss: 0.000252]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 19/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 20/66] [Batch classify loss: 0.000185]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 21/66] [Batch classify loss: 0.000268]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 22/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 23/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 24/66] [Batch classify loss: 0.000151]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 25/66] [Batch classify loss: 0.000176]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 26/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 27/66] [Batch classify loss: 0.000262]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 28/66] [Batch classify loss: 0.000199]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 29/66] [Batch classify loss: 0.000230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 30/66] [Batch classify loss: 0.000168]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 31/66] [Batch classify loss: 0.000281]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 32/66] [Batch classify loss: 0.000174]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 33/66] [Batch classify loss: 0.000244]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 34/66] [Batch classify loss: 0.000247]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 35/66] [Batch classify loss: 0.000218]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 36/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 37/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 38/66] [Batch classify loss: 0.000151]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 39/66] [Batch classify loss: 0.000176]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 40/66] [Batch classify loss: 0.000171]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 41/66] [Batch classify loss: 0.000243]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 42/66] [Batch classify loss: 0.000215]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 43/66] [Batch classify loss: 0.000224]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 44/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 45/66] [Batch classify loss: 0.000153]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 46/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 47/66] [Batch classify loss: 0.000163]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 48/66] [Batch classify loss: 0.000233]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 49/66] [Batch classify loss: 0.000187]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 50/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 51/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 52/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 53/66] [Batch classify loss: 0.000150]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 54/66] [Batch classify loss: 0.000172]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 55/66] [Batch classify loss: 0.000162]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 56/66] [Batch classify loss: 0.000192]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 57/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 58/66] [Batch classify loss: 0.000213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 59/66] [Batch classify loss: 0.000155]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 60/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 61/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 62/66] [Batch classify loss: 0.000232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 63/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 64/66] [Batch classify loss: 0.000285]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 41/50] [Batch 65/66] [Batch classify loss: 0.000242]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 41/50] [Batch 66/66] [Batch classify loss: 0.000249]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0041 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0041 epoch rmt trained classifier loss on the clean testing examples:1530.8138
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0041 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0041 epoch rmt trained classifier loss on adversarial testset:2474.0703125


41epoch learning rate:1.0000000000000002e-07
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 1/66] [Batch classify loss: 0.000236]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 2/66] [Batch classify loss: 0.000176]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 3/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 4/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 5/66] [Batch classify loss: 0.000191]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 6/66] [Batch classify loss: 0.000187]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 7/66] [Batch classify loss: 0.000163]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 8/66] [Batch classify loss: 0.000169]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 9/66] [Batch classify loss: 0.000169]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 10/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 11/66] [Batch classify loss: 0.000169]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 12/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 13/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 14/66] [Batch classify loss: 0.000200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 15/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 16/66] [Batch classify loss: 0.000168]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 17/66] [Batch classify loss: 0.000335]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 18/66] [Batch classify loss: 0.000190]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 19/66] [Batch classify loss: 0.000174]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 20/66] [Batch classify loss: 0.000167]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 21/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 22/66] [Batch classify loss: 0.000159]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 23/66] [Batch classify loss: 0.000187]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 24/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 25/66] [Batch classify loss: 0.000191]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 26/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 27/66] [Batch classify loss: 0.000166]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 28/66] [Batch classify loss: 0.000172]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 29/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 30/66] [Batch classify loss: 0.000263]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 31/66] [Batch classify loss: 0.000212]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 32/66] [Batch classify loss: 0.000229]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 33/66] [Batch classify loss: 0.000230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 34/66] [Batch classify loss: 0.000151]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 35/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 36/66] [Batch classify loss: 0.000237]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 37/66] [Batch classify loss: 0.000165]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 38/66] [Batch classify loss: 0.000171]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 39/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 40/66] [Batch classify loss: 0.000294]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 41/66] [Batch classify loss: 0.000199]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 42/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 43/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 44/66] [Batch classify loss: 0.000167]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 45/66] [Batch classify loss: 0.000217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 46/66] [Batch classify loss: 0.000173]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 47/66] [Batch classify loss: 0.000191]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 48/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 49/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 50/66] [Batch classify loss: 0.000200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 51/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 52/66] [Batch classify loss: 0.000166]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 53/66] [Batch classify loss: 0.000203]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 54/66] [Batch classify loss: 0.000238]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 55/66] [Batch classify loss: 0.000227]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 56/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 57/66] [Batch classify loss: 0.000294]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 58/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 59/66] [Batch classify loss: 0.000241]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 60/66] [Batch classify loss: 0.000306]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 61/66] [Batch classify loss: 0.000162]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 62/66] [Batch classify loss: 0.000205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 63/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 64/66] [Batch classify loss: 0.000190]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 42/50] [Batch 65/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 42/50] [Batch 66/66] [Batch classify loss: 0.000188]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0042 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0042 epoch rmt trained classifier loss on the clean testing examples:1583.9634
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0042 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0042 epoch rmt trained classifier loss on adversarial testset:2542.749755859375


42epoch learning rate:1.0000000000000002e-07
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 1/66] [Batch classify loss: 0.000176]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 2/66] [Batch classify loss: 0.000217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 3/66] [Batch classify loss: 0.000173]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 4/66] [Batch classify loss: 0.000148]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 5/66] [Batch classify loss: 0.000143]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 6/66] [Batch classify loss: 0.000234]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 7/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 8/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 9/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 10/66] [Batch classify loss: 0.000146]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 11/66] [Batch classify loss: 0.000161]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 12/66] [Batch classify loss: 0.000192]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 13/66] [Batch classify loss: 0.000171]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 14/66] [Batch classify loss: 0.000261]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 15/66] [Batch classify loss: 0.000190]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 16/66] [Batch classify loss: 0.000144]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 17/66] [Batch classify loss: 0.000161]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 18/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 19/66] [Batch classify loss: 0.000217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 20/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 21/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 22/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 23/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 24/66] [Batch classify loss: 0.000205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 25/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 26/66] [Batch classify loss: 0.000226]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 27/66] [Batch classify loss: 0.000193]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 28/66] [Batch classify loss: 0.000184]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 29/66] [Batch classify loss: 0.000153]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 30/66] [Batch classify loss: 0.000215]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 31/66] [Batch classify loss: 0.000173]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 32/66] [Batch classify loss: 0.000203]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 33/66] [Batch classify loss: 0.000247]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 34/66] [Batch classify loss: 0.000203]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 35/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 36/66] [Batch classify loss: 0.000191]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 37/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 38/66] [Batch classify loss: 0.000193]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 39/66] [Batch classify loss: 0.000255]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 40/66] [Batch classify loss: 0.000175]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 41/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 42/66] [Batch classify loss: 0.000160]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 43/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 44/66] [Batch classify loss: 0.000172]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 45/66] [Batch classify loss: 0.000225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 46/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 47/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 48/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 49/66] [Batch classify loss: 0.000225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 50/66] [Batch classify loss: 0.000327]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 51/66] [Batch classify loss: 0.000184]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 52/66] [Batch classify loss: 0.000250]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 53/66] [Batch classify loss: 0.000239]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 54/66] [Batch classify loss: 0.000225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 55/66] [Batch classify loss: 0.000308]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 56/66] [Batch classify loss: 0.000332]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 57/66] [Batch classify loss: 0.000183]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 58/66] [Batch classify loss: 0.000208]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 59/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 60/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 61/66] [Batch classify loss: 0.000192]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 62/66] [Batch classify loss: 0.000192]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 63/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 64/66] [Batch classify loss: 0.000199]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 43/50] [Batch 65/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 43/50] [Batch 66/66] [Batch classify loss: 0.000186]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0043 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0043 epoch rmt trained classifier loss on the clean testing examples:1536.7711
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0043 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0043 epoch rmt trained classifier loss on adversarial testset:2484.294921875


43epoch learning rate:1.0000000000000002e-07
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 1/66] [Batch classify loss: 0.000193]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 2/66] [Batch classify loss: 0.000229]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 3/66] [Batch classify loss: 0.000213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 4/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 5/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 6/66] [Batch classify loss: 0.000200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 7/66] [Batch classify loss: 0.000165]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 8/66] [Batch classify loss: 0.000212]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 9/66] [Batch classify loss: 0.000162]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 10/66] [Batch classify loss: 0.000286]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 11/66] [Batch classify loss: 0.000183]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 12/66] [Batch classify loss: 0.000165]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 13/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 14/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 15/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 16/66] [Batch classify loss: 0.000292]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 17/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 18/66] [Batch classify loss: 0.000176]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 19/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 20/66] [Batch classify loss: 0.000184]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 21/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 22/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 23/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 24/66] [Batch classify loss: 0.000157]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 25/66] [Batch classify loss: 0.000168]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 26/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 27/66] [Batch classify loss: 0.000230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 28/66] [Batch classify loss: 0.000259]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 29/66] [Batch classify loss: 0.000218]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 30/66] [Batch classify loss: 0.000291]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 31/66] [Batch classify loss: 0.000163]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 32/66] [Batch classify loss: 0.000226]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 33/66] [Batch classify loss: 0.000217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 34/66] [Batch classify loss: 0.000185]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 35/66] [Batch classify loss: 0.000173]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 36/66] [Batch classify loss: 0.000263]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 37/66] [Batch classify loss: 0.000184]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 38/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 39/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 40/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 41/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 42/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 43/66] [Batch classify loss: 0.000288]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 44/66] [Batch classify loss: 0.000172]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 45/66] [Batch classify loss: 0.000249]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 46/66] [Batch classify loss: 0.000260]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 47/66] [Batch classify loss: 0.000168]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 48/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 49/66] [Batch classify loss: 0.000189]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 50/66] [Batch classify loss: 0.000192]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 51/66] [Batch classify loss: 0.000199]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 52/66] [Batch classify loss: 0.000147]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 53/66] [Batch classify loss: 0.000210]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 54/66] [Batch classify loss: 0.000192]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 55/66] [Batch classify loss: 0.000192]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 56/66] [Batch classify loss: 0.000249]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 57/66] [Batch classify loss: 0.000237]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 58/66] [Batch classify loss: 0.000190]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 59/66] [Batch classify loss: 0.000191]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 60/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 61/66] [Batch classify loss: 0.000171]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 62/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 63/66] [Batch classify loss: 0.000218]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 64/66] [Batch classify loss: 0.000243]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 44/50] [Batch 65/66] [Batch classify loss: 0.000238]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 44/50] [Batch 66/66] [Batch classify loss: 0.000183]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0044 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0044 epoch rmt trained classifier loss on the clean testing examples:1598.4153
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0044 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0044 epoch rmt trained classifier loss on adversarial testset:2569.141357421875


44epoch learning rate:1.0000000000000002e-07
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 1/66] [Batch classify loss: 0.000187]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 2/66] [Batch classify loss: 0.000207]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 3/66] [Batch classify loss: 0.000192]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 4/66] [Batch classify loss: 0.000272]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 5/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 6/66] [Batch classify loss: 0.000168]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 7/66] [Batch classify loss: 0.000184]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 8/66] [Batch classify loss: 0.000259]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 9/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 10/66] [Batch classify loss: 0.000158]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 11/66] [Batch classify loss: 0.000157]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 12/66] [Batch classify loss: 0.000193]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 13/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 14/66] [Batch classify loss: 0.000184]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 15/66] [Batch classify loss: 0.000162]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 16/66] [Batch classify loss: 0.000278]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 17/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 18/66] [Batch classify loss: 0.000245]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 19/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 20/66] [Batch classify loss: 0.000162]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 21/66] [Batch classify loss: 0.000168]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 22/66] [Batch classify loss: 0.000203]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 23/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 24/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 25/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 26/66] [Batch classify loss: 0.000190]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 27/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 28/66] [Batch classify loss: 0.000257]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 29/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 30/66] [Batch classify loss: 0.000189]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 31/66] [Batch classify loss: 0.000200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 32/66] [Batch classify loss: 0.000266]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 33/66] [Batch classify loss: 0.000172]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 34/66] [Batch classify loss: 0.000148]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 35/66] [Batch classify loss: 0.000167]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 36/66] [Batch classify loss: 0.000164]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 37/66] [Batch classify loss: 0.000189]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 38/66] [Batch classify loss: 0.000238]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 39/66] [Batch classify loss: 0.000173]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 40/66] [Batch classify loss: 0.000254]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 41/66] [Batch classify loss: 0.000147]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 42/66] [Batch classify loss: 0.000227]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 43/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 44/66] [Batch classify loss: 0.000288]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 45/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 46/66] [Batch classify loss: 0.000184]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 47/66] [Batch classify loss: 0.000150]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 48/66] [Batch classify loss: 0.000175]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 49/66] [Batch classify loss: 0.000157]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 50/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 51/66] [Batch classify loss: 0.000158]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 52/66] [Batch classify loss: 0.000175]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 53/66] [Batch classify loss: 0.000167]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 54/66] [Batch classify loss: 0.000225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 55/66] [Batch classify loss: 0.000165]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 56/66] [Batch classify loss: 0.000239]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 57/66] [Batch classify loss: 0.000242]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 58/66] [Batch classify loss: 0.000164]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 59/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 60/66] [Batch classify loss: 0.000192]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 61/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 62/66] [Batch classify loss: 0.000210]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 63/66] [Batch classify loss: 0.000200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 64/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 45/50] [Batch 65/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 45/50] [Batch 66/66] [Batch classify loss: 0.000148]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0045 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0045 epoch rmt trained classifier loss on the clean testing examples:1540.5923
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0045 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0045 epoch rmt trained classifier loss on adversarial testset:2483.020751953125


45epoch learning rate:1.0000000000000002e-07
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 1/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 2/66] [Batch classify loss: 0.000171]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 3/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 4/66] [Batch classify loss: 0.000273]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 5/66] [Batch classify loss: 0.000187]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 6/66] [Batch classify loss: 0.000213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 7/66] [Batch classify loss: 0.000169]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 8/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 9/66] [Batch classify loss: 0.000158]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 10/66] [Batch classify loss: 0.000145]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 11/66] [Batch classify loss: 0.000237]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 12/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 13/66] [Batch classify loss: 0.000140]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 14/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 15/66] [Batch classify loss: 0.000161]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 16/66] [Batch classify loss: 0.000225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 17/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 18/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 19/66] [Batch classify loss: 0.000232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 20/66] [Batch classify loss: 0.000210]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 21/66] [Batch classify loss: 0.000162]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 22/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 23/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 24/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 25/66] [Batch classify loss: 0.000224]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 26/66] [Batch classify loss: 0.000274]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 27/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 28/66] [Batch classify loss: 0.000210]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 29/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 30/66] [Batch classify loss: 0.000238]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 31/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 32/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 33/66] [Batch classify loss: 0.000171]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 34/66] [Batch classify loss: 0.000157]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 35/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 36/66] [Batch classify loss: 0.000215]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 37/66] [Batch classify loss: 0.000264]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 38/66] [Batch classify loss: 0.000185]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 39/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 40/66] [Batch classify loss: 0.000174]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 41/66] [Batch classify loss: 0.000166]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 42/66] [Batch classify loss: 0.000268]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 43/66] [Batch classify loss: 0.000217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 44/66] [Batch classify loss: 0.000162]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 45/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 46/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 47/66] [Batch classify loss: 0.000282]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 48/66] [Batch classify loss: 0.000242]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 49/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 50/66] [Batch classify loss: 0.000140]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 51/66] [Batch classify loss: 0.000248]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 52/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 53/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 54/66] [Batch classify loss: 0.000215]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 55/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 56/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 57/66] [Batch classify loss: 0.000187]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 58/66] [Batch classify loss: 0.000232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 59/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 60/66] [Batch classify loss: 0.000167]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 61/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 62/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 63/66] [Batch classify loss: 0.000187]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 64/66] [Batch classify loss: 0.000165]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 46/50] [Batch 65/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 46/50] [Batch 66/66] [Batch classify loss: 0.000237]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0046 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0046 epoch rmt trained classifier loss on the clean testing examples:1583.9419
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0046 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0046 epoch rmt trained classifier loss on adversarial testset:2556.564453125


46epoch learning rate:1.0000000000000002e-07
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 1/66] [Batch classify loss: 0.000176]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 2/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 3/66] [Batch classify loss: 0.000193]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 4/66] [Batch classify loss: 0.000217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 5/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 6/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 7/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 8/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 9/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 10/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 11/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 12/66] [Batch classify loss: 0.000223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 13/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 14/66] [Batch classify loss: 0.000173]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 15/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 16/66] [Batch classify loss: 0.000184]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 17/66] [Batch classify loss: 0.000232]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 18/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 19/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 20/66] [Batch classify loss: 0.000172]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 21/66] [Batch classify loss: 0.000155]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 22/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 23/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 24/66] [Batch classify loss: 0.000230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 25/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 26/66] [Batch classify loss: 0.000212]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 27/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 28/66] [Batch classify loss: 0.000203]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 29/66] [Batch classify loss: 0.000190]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 30/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 31/66] [Batch classify loss: 0.000260]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 32/66] [Batch classify loss: 0.000213]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 33/66] [Batch classify loss: 0.000173]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 34/66] [Batch classify loss: 0.000155]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 35/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 36/66] [Batch classify loss: 0.000248]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 37/66] [Batch classify loss: 0.000138]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 38/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 39/66] [Batch classify loss: 0.000172]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 40/66] [Batch classify loss: 0.000243]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 41/66] [Batch classify loss: 0.000183]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 42/66] [Batch classify loss: 0.000276]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 43/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 44/66] [Batch classify loss: 0.000257]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 45/66] [Batch classify loss: 0.000215]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 46/66] [Batch classify loss: 0.000223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 47/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 48/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 49/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 50/66] [Batch classify loss: 0.000239]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 51/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 52/66] [Batch classify loss: 0.000241]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 53/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 54/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 55/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 56/66] [Batch classify loss: 0.000199]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 57/66] [Batch classify loss: 0.000176]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 58/66] [Batch classify loss: 0.000215]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 59/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 60/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 61/66] [Batch classify loss: 0.000226]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 62/66] [Batch classify loss: 0.000238]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 63/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 64/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 47/50] [Batch 65/66] [Batch classify loss: 0.000198]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 47/50] [Batch 66/66] [Batch classify loss: 0.000214]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0047 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0047 epoch rmt trained classifier loss on the clean testing examples:1613.6807
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0047 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0047 epoch rmt trained classifier loss on adversarial testset:2598.179931640625


47epoch learning rate:1.0000000000000002e-07
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 1/66] [Batch classify loss: 0.000212]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 2/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 3/66] [Batch classify loss: 0.000149]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 4/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 5/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 6/66] [Batch classify loss: 0.000270]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 7/66] [Batch classify loss: 0.000208]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 8/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 9/66] [Batch classify loss: 0.000227]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 10/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 11/66] [Batch classify loss: 0.000212]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 12/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 13/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 14/66] [Batch classify loss: 0.000183]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 15/66] [Batch classify loss: 0.000230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 16/66] [Batch classify loss: 0.000210]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 17/66] [Batch classify loss: 0.000159]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 18/66] [Batch classify loss: 0.000214]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 19/66] [Batch classify loss: 0.000189]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 20/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 21/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 22/66] [Batch classify loss: 0.000138]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 23/66] [Batch classify loss: 0.000165]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 24/66] [Batch classify loss: 0.000225]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 25/66] [Batch classify loss: 0.000162]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 26/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 27/66] [Batch classify loss: 0.000164]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 28/66] [Batch classify loss: 0.000229]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 29/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 30/66] [Batch classify loss: 0.000322]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 31/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 32/66] [Batch classify loss: 0.000205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 33/66] [Batch classify loss: 0.000155]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 34/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 35/66] [Batch classify loss: 0.000234]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 36/66] [Batch classify loss: 0.000240]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 37/66] [Batch classify loss: 0.000268]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 38/66] [Batch classify loss: 0.000200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 39/66] [Batch classify loss: 0.000135]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 40/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 41/66] [Batch classify loss: 0.000165]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 42/66] [Batch classify loss: 0.000260]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 43/66] [Batch classify loss: 0.000189]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 44/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 45/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 46/66] [Batch classify loss: 0.000224]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 47/66] [Batch classify loss: 0.000226]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 48/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 49/66] [Batch classify loss: 0.000247]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 50/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 51/66] [Batch classify loss: 0.000161]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 52/66] [Batch classify loss: 0.000238]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 53/66] [Batch classify loss: 0.000197]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 54/66] [Batch classify loss: 0.000244]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 55/66] [Batch classify loss: 0.000263]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 56/66] [Batch classify loss: 0.000238]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 57/66] [Batch classify loss: 0.000156]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 58/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 59/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 60/66] [Batch classify loss: 0.000223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 61/66] [Batch classify loss: 0.000248]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 62/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 63/66] [Batch classify loss: 0.000177]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 64/66] [Batch classify loss: 0.000228]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 48/50] [Batch 65/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 48/50] [Batch 66/66] [Batch classify loss: 0.000183]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0048 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0048 epoch rmt trained classifier loss on the clean testing examples:1596.6263
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0048 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0048 epoch rmt trained classifier loss on adversarial testset:2571.837158203125


48epoch learning rate:1.0000000000000002e-07
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 1/66] [Batch classify loss: 0.000279]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 2/66] [Batch classify loss: 0.000207]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 3/66] [Batch classify loss: 0.000172]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 4/66] [Batch classify loss: 0.000208]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 5/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 6/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 7/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 8/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 9/66] [Batch classify loss: 0.000218]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 10/66] [Batch classify loss: 0.000179]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 11/66] [Batch classify loss: 0.000176]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 12/66] [Batch classify loss: 0.000157]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 13/66] [Batch classify loss: 0.000183]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 14/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 15/66] [Batch classify loss: 0.000282]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 16/66] [Batch classify loss: 0.000166]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 17/66] [Batch classify loss: 0.000200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 18/66] [Batch classify loss: 0.000217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 19/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 20/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 21/66] [Batch classify loss: 0.000192]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 22/66] [Batch classify loss: 0.000161]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 23/66] [Batch classify loss: 0.000262]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 24/66] [Batch classify loss: 0.000153]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 25/66] [Batch classify loss: 0.000209]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 26/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 27/66] [Batch classify loss: 0.000233]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 28/66] [Batch classify loss: 0.000169]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 29/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 30/66] [Batch classify loss: 0.000188]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 31/66] [Batch classify loss: 0.000200]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 32/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 33/66] [Batch classify loss: 0.000162]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 34/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 35/66] [Batch classify loss: 0.000192]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 36/66] [Batch classify loss: 0.000203]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 37/66] [Batch classify loss: 0.000239]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 38/66] [Batch classify loss: 0.000223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 39/66] [Batch classify loss: 0.000190]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 40/66] [Batch classify loss: 0.000169]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 41/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 42/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 43/66] [Batch classify loss: 0.000160]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 44/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 45/66] [Batch classify loss: 0.000262]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 46/66] [Batch classify loss: 0.000196]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 47/66] [Batch classify loss: 0.000248]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 48/66] [Batch classify loss: 0.000195]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 49/66] [Batch classify loss: 0.000219]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 50/66] [Batch classify loss: 0.000150]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 51/66] [Batch classify loss: 0.000250]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 52/66] [Batch classify loss: 0.000171]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 53/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 54/66] [Batch classify loss: 0.000164]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 55/66] [Batch classify loss: 0.000163]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 56/66] [Batch classify loss: 0.000245]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 57/66] [Batch classify loss: 0.000146]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 58/66] [Batch classify loss: 0.000187]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 59/66] [Batch classify loss: 0.000217]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 60/66] [Batch classify loss: 0.000154]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 61/66] [Batch classify loss: 0.000250]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 62/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 63/66] [Batch classify loss: 0.000152]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 64/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 49/50] [Batch 65/66] [Batch classify loss: 0.000243]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 49/50] [Batch 66/66] [Batch classify loss: 0.000203]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0049 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0049 epoch rmt trained classifier loss on the clean testing examples:1597.9296
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0049 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0049 epoch rmt trained classifier loss on adversarial testset:2569.132080078125


49epoch learning rate:1.0000000000000002e-07
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 1/66] [Batch classify loss: 0.000164]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 2/66] [Batch classify loss: 0.000185]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 3/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 4/66] [Batch classify loss: 0.000231]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 5/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 6/66] [Batch classify loss: 0.000181]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 7/66] [Batch classify loss: 0.000193]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 8/66] [Batch classify loss: 0.000276]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 9/66] [Batch classify loss: 0.000183]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 10/66] [Batch classify loss: 0.000280]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 11/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 12/66] [Batch classify loss: 0.000155]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 13/66] [Batch classify loss: 0.000171]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 14/66] [Batch classify loss: 0.000222]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 15/66] [Batch classify loss: 0.000229]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 16/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 17/66] [Batch classify loss: 0.000216]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 18/66] [Batch classify loss: 0.000215]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 19/66] [Batch classify loss: 0.000171]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 20/66] [Batch classify loss: 0.000227]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 21/66] [Batch classify loss: 0.000205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 22/66] [Batch classify loss: 0.000185]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 23/66] [Batch classify loss: 0.000248]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 24/66] [Batch classify loss: 0.000182]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 25/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 26/66] [Batch classify loss: 0.000154]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 27/66] [Batch classify loss: 0.000186]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 28/66] [Batch classify loss: 0.000178]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 29/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 30/66] [Batch classify loss: 0.000223]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 31/66] [Batch classify loss: 0.000166]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 32/66] [Batch classify loss: 0.000160]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 33/66] [Batch classify loss: 0.000180]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 34/66] [Batch classify loss: 0.000146]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 35/66] [Batch classify loss: 0.000206]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 36/66] [Batch classify loss: 0.000210]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 37/66] [Batch classify loss: 0.000208]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 38/66] [Batch classify loss: 0.000170]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 39/66] [Batch classify loss: 0.000243]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 40/66] [Batch classify loss: 0.000205]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 41/66] [Batch classify loss: 0.000191]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 42/66] [Batch classify loss: 0.000230]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 43/66] [Batch classify loss: 0.000211]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 44/66] [Batch classify loss: 0.000185]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 45/66] [Batch classify loss: 0.000159]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 46/66] [Batch classify loss: 0.000174]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 47/66] [Batch classify loss: 0.000162]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 48/66] [Batch classify loss: 0.000167]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 49/66] [Batch classify loss: 0.000160]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 50/66] [Batch classify loss: 0.000204]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 51/66] [Batch classify loss: 0.000267]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 52/66] [Batch classify loss: 0.000163]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 53/66] [Batch classify loss: 0.000221]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 54/66] [Batch classify loss: 0.000174]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 55/66] [Batch classify loss: 0.000220]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 56/66] [Batch classify loss: 0.000184]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 57/66] [Batch classify loss: 0.000194]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 58/66] [Batch classify loss: 0.000215]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 59/66] [Batch classify loss: 0.000169]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 60/66] [Batch classify loss: 0.000166]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 61/66] [Batch classify loss: 0.000202]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 62/66] [Batch classify loss: 0.000281]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 63/66] [Batch classify loss: 0.000191]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 64/66] [Batch classify loss: 0.000201]
inputs.shape: torch.Size([256, 3, 32, 32])
targets.shape: torch.Size([256, 10])
[Epoch 50/50] [Batch 65/66] [Batch classify loss: 0.000134]
inputs.shape: torch.Size([175, 3, 32, 32])
targets.shape: torch.Size([175, 10])
[Epoch 50/50] [Batch 66/66] [Batch classify loss: 0.000130]
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0050 epoch rmt trained classifier accuary on the clean testing examples:10.0000%
0050 epoch rmt trained classifier loss on the clean testing examples:1566.3035
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
generating testset adversarial examples...
finished generate testset adversarial examples !
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
0050 epoch rmt trained classifier accuary on adversarial testset:10.0000%
0050 epoch rmt trained classifier loss on adversarial testset:2523.998046875
x_set.shape: torch.Size([10000, 3, 32, 32])
y_set.shape: torch.Size([10000])
testset_total_num: 10000
batch_num: 40
batch_size: 256
epoch_correct_num: tensor(1000)
Accuary of rmt trained classifier on clean testset:10.0000%
Loss of rmt trained classifier on clean testset:1566.303466796875
initlize attack classifier
Get FGSM examples generate model
self._args.attack_eps: 0.3
Traceback (most recent call last):
  File "tasklauncher-20210922.py", line 142, in <module>
    adv_x_test, adv_y_test = attack_classifier.generateadvfromtestsettensor(exp_result_dir, cle_x_test, cle_y_test)
  File "/home/maggie/mmat/attacks/advattack.py", line 272, in generateadvfromtestsettensor
    self._exp_result_dir = os.path.join(self._exp_result_dir,f'attack-{self._args.dataset}-dataset')
  File "/home/xieyi/anaconda3/envs/mmat/lib/python3.7/posixpath.py", line 80, in join
    a = os.fspath(a)
TypeError: expected str, bytes or os.PathLike object, not Tensor
