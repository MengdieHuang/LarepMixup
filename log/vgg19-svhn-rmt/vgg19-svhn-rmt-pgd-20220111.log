

---------------------------------------
Torch cuda is available
args.subcommand=run, run the command line
date: 20220111
blackbox attack
Experiment result save dir: /home/maggie/mmat/result/defense/rmt/pgd/basemixup-betasampler/vgg19-svhn/blackbox/20220111/00000
initilize the dataset loading parameters
Using downloaded and verified file: /home/data/maggie/svhn/train_32x32.mat
Loading *svhn* train dataloader finished !
Loading *svhn* test dataloader finished !
initlize classifier
learned calssify model != None
args.adv_dataset： /home/maggie/mmat/result/attack/pgd/vgg19-svhn/20210915/00000-attackacc-0.195221/attack-svhn-dataset/samples
Accuary of before rmt trained classifier on clean testset:95.8474%
Loss of before mmat trained classifier clean testset:0.17024008929729462
args.mix_mode: basemixup
args.mix_w_num: 2
args.beta_alpha: 0.5
args.dirichlet_gama: 1
cle_w_train.shape: torch.Size([24004, 8, 512])
cle_y_train.shape: torch.Size([24004, 8])
cle_x_test.shape: torch.Size([26032, 3, 32, 32])
cle_y_test.shape: torch.Size([26032])
adv_x_test.shape: torch.Size([26032, 3, 32, 32])
adv_y_test.shape: torch.Size([26032])
cle_train_dataloader.len: 287
Accuary of before rmt trained classifier on adversarial testset:19.5221%
Loss of before mmat trained classifier on adversarial testset:9.237252235412598
w_trainset_len: 24004
batch_size: 256
w_batch_num: 94


0epoch learning rate:0.001
Setting up PyTorch plugin "bias_act_plugin"... /home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/torch/utils/cpp_extension.py:286: UserWarning: 

                               !! WARNING !!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Your compiler (c++) is not compatible with the compiler Pytorch was
built with for this platform, which is g++ on linux. Please
use g++ to to compile your extension. Alternatively, you may
compile PyTorch from source using c++, and then you can also use
c++ to compile your extension.

See https://github.com/pytorch/pytorch/blob/master/CONTRIBUTING.md for help
with compiling PyTorch from source.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

                              !! WARNING !!

  platform=sys.platform))
Done.
Setting up PyTorch plugin "upfirdn2d_plugin"... /home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/torch/utils/cpp_extension.py:286: UserWarning: 

                               !! WARNING !!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Your compiler (c++) is not compatible with the compiler Pytorch was
built with for this platform, which is g++ on linux. Please
use g++ to to compile your extension. Alternatively, you may
compile PyTorch from source using c++, and then you can also use
c++ to compile your extension.

See https://github.com/pytorch/pytorch/blob/master/CONTRIBUTING.md for help
with compiling PyTorch from source.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

                              !! WARNING !!

  platform=sys.platform))
Done.
[Epoch 1/40] [Batch 1/287] [Batch classify loss: 1.597257]
[Epoch 1/40] [Batch 2/287] [Batch classify loss: 1.146687]
[Epoch 1/40] [Batch 3/287] [Batch classify loss: 1.154975]
[Epoch 1/40] [Batch 4/287] [Batch classify loss: 1.095055]
[Epoch 1/40] [Batch 5/287] [Batch classify loss: 1.054153]
[Epoch 1/40] [Batch 6/287] [Batch classify loss: 1.097666]
[Epoch 1/40] [Batch 7/287] [Batch classify loss: 0.894833]
[Epoch 1/40] [Batch 8/287] [Batch classify loss: 0.930996]
[Epoch 1/40] [Batch 9/287] [Batch classify loss: 0.962149]
[Epoch 1/40] [Batch 10/287] [Batch classify loss: 0.970275]
[Epoch 1/40] [Batch 11/287] [Batch classify loss: 0.982458]
[Epoch 1/40] [Batch 12/287] [Batch classify loss: 0.854599]
[Epoch 1/40] [Batch 13/287] [Batch classify loss: 1.004649]
[Epoch 1/40] [Batch 14/287] [Batch classify loss: 0.936648]
[Epoch 1/40] [Batch 15/287] [Batch classify loss: 0.918385]
[Epoch 1/40] [Batch 16/287] [Batch classify loss: 0.950807]
Traceback (most recent call last):
  File "tasklauncher-20220111.py", line 223, in <module>
    target_classifier.rmt(args,cle_w_train,cle_y_train, cle_train_dataloader, cle_x_test,cle_y_test,adv_x_test,adv_y_test,exp_result_dir,stylegan2ada_config_kwargs)
  File "/home/maggie/mmat/clamodels/classifier.py", line 1535, in rmt
    mix_img_batch, mix_lab_batch = mixup_data(args, exp_result_dir, stylegan2ada_config_kwargs, pro_img_batch, pro_lab_batch)      #   混合样本 two-hot标签
  File "/home/maggie/mmat/clamodels/classifier.py", line 63, in mixup_data
    mix_x_train, mix_y_train = generate_model.generate()
  File "/home/maggie/mmat/genmodels/mixgenerate.py", line 486, in generate
    self._model.generate(self._exp_result_dir, self.mix_w_train, self.mix_y_train)
  File "/home/maggie/mmat/genmodels/stylegan2ada.py", line 2005, in generate
    generated_x_set, generated_y_set = self.__generatemain__(self._args, self._exp_result_dir, interpolated_w_set, interpolated_y_set)
  File "/home/maggie/mmat/genmodels/stylegan2ada.py", line 2016, in __generatemain__
    generated_x_set, generated_y_set = self.__generatefromntensor__()
  File "/home/maggie/mmat/genmodels/stylegan2ada.py", line 2099, in __generatefromntensor__
    interpolated_y = interpolated_y_set,
  File "/home/maggie/mmat/genmodels/stylegan2ada.py", line 2168, in __getgeneratedbatchxy__
    img = G.synthesis(w.unsqueeze(0), noise_mode=noise_mode).cpu()
  File "/home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "<string>", line 479, in forward
  File "/home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "<string>", line 421, in forward
  File "/home/xieyi/anaconda3/envs/mmat/lib/python3.7/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "<string>", line 331, in forward
  File "/home/maggie/mmat/utils/stylegan2ada/torch_utils/ops/bias_act.py", line 89, in bias_act
    return _bias_act_cuda(dim=dim, act=act, alpha=alpha, gain=gain, clamp=clamp).apply(x, b)
KeyboardInterrupt
